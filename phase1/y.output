Terminals unused in grammar

   '|'
   '&'
   '+'
   '-'
   '*'
   '/'
   '%'


State 30 conflicts: 1 shift/reduce
State 32 conflicts: 1 shift/reduce
State 49 conflicts: 13 shift/reduce
State 51 conflicts: 13 shift/reduce
State 53 conflicts: 1 shift/reduce
State 55 conflicts: 1 shift/reduce
State 105 conflicts: 13 shift/reduce
State 106 conflicts: 13 shift/reduce


Grammar

    0 $accept: program $end

    1 program: stmt

    2 stmt: expr
    3     | ifstmt
    4     | whilestmt
    5     | forstmt
    6     | returnstmt
    7     | BREAK SEMICOLON
    8     | CONTINUE SEMICOLON
    9     | block
   10     | funcdef
   11     | SEMICOLON

   12 expr: assignexpr
   13     | expr op expr
   14     | term

   15 op: PLUS
   16   | MINUS
   17   | ASTERISK
   18   | DIVISION
   19   | PERCENT
   20   | GREATER
   21   | GREATER_EQUALS
   22   | LESS
   23   | LESS_EQUALS
   24   | EQUALS
   25   | DIFFERENT
   26   | AND
   27   | OR

   28 term: LEFT_BRACKETS expr RIGHT_BRACKETS
   29     | MINUS expr
   30     | NOT expr
   31     | PLUS_PLUS lvalue
   32     | lvalue PLUS_PLUS
   33     | MINUS_MINUS lvalue
   34     | lvalue MINUS_MINUS
   35     | primary

   36 assignexpr: lvalue ASSIGN expr

   37 primary: lvalue
   38        | call
   39        | objectdef
   40        | LEFT_BRACKETS funcdef RIGHT_BRACKETS
   41        | const

   42 lvalue: ID
   43       | LOCAL ID
   44       | DOUBLE_COLON ID
   45       | member

   46 member: lvalue DOT ID
   47       | lvalue LEFT_SQUARE expr RIGHT_SQUARE
   48       | call DOT ID
   49       | call LEFT_SQUARE expr RIGHT_SQUARE

   50 call: call LEFT_BRACKETS elist RIGHT_BRACKETS
   51     | lvalue callsuffix
   52     | LEFT_BRACKETS funcdef RIGHT_BRACKETS LEFT_BRACKETS elist RIGHT_BRACKETS

   53 callsuffix: normcall
   54           | methodcall

   55 normcall: LEFT_BRACKETS elist RIGHT_BRACKETS

   56 methodcall: Diaeresis ID LEFT_BRACKETS elist RIGHT_BRACKETS

   57 elist: LEFT_SQUARE expr LEFT_SQUARE COMMA expr RIGHT_SQUARE RIGHT_SQUARE

   58 objectdef: LEFT_SQUARE LEFT_SQUARE elist
   59          | indexed RIGHT_SQUARE RIGHT_SQUARE

   60 indexed: LEFT_SQUARE indexedelem LEFT_SQUARE COMMA indexedelem RIGHT_SQUARE RIGHT_SQUARE

   61 indexedelem: LEFT_BRACE expr COLON expr RIGHT_BRACE

   62 block: LEFT_BRACE LEFT_SQUARE stmt RIGHT_SQUARE RIGHT_BRACE

   63 funcdef: FUNCTION LEFT_SQUARE ID RIGHT_SQUARE LEFT_BRACKETS idlist RIGHT_BRACKETS block

   64 const: NUMBER
   65      | STRING
   66      | NIL
   67      | TRUE
   68      | FALSE

   69 idlist: LEFT_SQUARE ID LEFT_SQUARE COMMA ID RIGHT_SQUARE RIGHT_SQUARE

   70 ifstmt: IF LEFT_BRACKETS expr RIGHT_BRACKETS stmt LEFT_SQUARE ELSE stmt RIGHT_SQUARE

   71 whilestmt: WHILE LEFT_BRACKETS expr RIGHT_BRACKETS stmt

   72 forstmt: FOR LEFT_BRACKETS elist SEMICOLON expr SEMICOLON elist RIGHT_BRACKETS stmt

   73 returnstmt: RETURN LEFT_SQUARE expr RIGHT_SQUARE


Terminals, with rules where they appear

$end (0) 0
'%' (37)
'&' (38)
'*' (42)
'+' (43)
'-' (45)
'/' (47)
'|' (124)
error (256)
NUMBER (258) 64
IF (259) 70
ELSE (260) 70
WHILE (261) 71
FOR (262) 72
FUNCTION (263) 63
RETURN (264) 73
BREAK (265) 7
CONTINUE (266) 8
AND (267) 26
NOT (268) 30
OR (269) 27
LOCAL (270) 43
TRUE (271) 67
FALSE (272) 68
NIL (273) 66
STRING (274) 65
ID (275) 42 43 44 46 48 56 63 69
EQUALS (276) 24
PLUS (277) 15
ASSIGN (278) 36
MINUS (279) 16 29
ASTERISK (280) 17
DIVISION (281) 18
PERCENT (282) 19
DIFFERENT (283) 25
PLUS_PLUS (284) 31 32
MINUS_MINUS (285) 33 34
GREATER (286) 20
LESS (287) 22
GREATER_EQUALS (288) 21
LESS_EQUALS (289) 23
SEMICOLON (290) 7 8 11 72
COMMA (291) 57 60 69
COLON (292) 61
DOUBLE_COLON (293) 44
DOT (294) 46 48
Diaeresis (295) 56
LEFT_BRACE (296) 61 62
RIGHT_BRACE (297) 61 62
LEFT_SQUARE (298) 47 49 57 58 60 62 63 69 70 73
RIGHT_SQUARE (299) 47 49 57 59 60 62 63 69 70 73
LEFT_BRACKETS (300) 28 40 50 52 55 56 63 70 71 72
RIGHT_BRACKETS (301) 28 40 50 52 55 56 63 70 71 72


Nonterminals, with rules where they appear

$accept (54)
    on left: 0
program (55)
    on left: 1, on right: 0
stmt (56)
    on left: 2 3 4 5 6 7 8 9 10 11, on right: 1 62 70 71 72
expr (57)
    on left: 12 13 14, on right: 2 13 28 29 30 36 47 49 57 61 70 71
    72 73
op (58)
    on left: 15 16 17 18 19 20 21 22 23 24 25 26 27, on right: 13
term (59)
    on left: 28 29 30 31 32 33 34 35, on right: 14
assignexpr (60)
    on left: 36, on right: 12
primary (61)
    on left: 37 38 39 40 41, on right: 35
lvalue (62)
    on left: 42 43 44 45, on right: 31 32 33 34 36 37 46 47 51
member (63)
    on left: 46 47 48 49, on right: 45
call (64)
    on left: 50 51 52, on right: 38 48 49 50
callsuffix (65)
    on left: 53 54, on right: 51
normcall (66)
    on left: 55, on right: 53
methodcall (67)
    on left: 56, on right: 54
elist (68)
    on left: 57, on right: 50 52 55 56 58 72
objectdef (69)
    on left: 58 59, on right: 39
indexed (70)
    on left: 60, on right: 59
indexedelem (71)
    on left: 61, on right: 60
block (72)
    on left: 62, on right: 9 63
funcdef (73)
    on left: 63, on right: 10 40 52
const (74)
    on left: 64 65 66 67 68, on right: 41
idlist (75)
    on left: 69, on right: 63
ifstmt (76)
    on left: 70, on right: 3
whilestmt (77)
    on left: 71, on right: 4
forstmt (78)
    on left: 72, on right: 5
returnstmt (79)
    on left: 73, on right: 6


State 0

    0 $accept: . program $end

    NUMBER         shift, and go to state 1
    IF             shift, and go to state 2
    WHILE          shift, and go to state 3
    FOR            shift, and go to state 4
    FUNCTION       shift, and go to state 5
    RETURN         shift, and go to state 6
    BREAK          shift, and go to state 7
    CONTINUE       shift, and go to state 8
    NOT            shift, and go to state 9
    LOCAL          shift, and go to state 10
    TRUE           shift, and go to state 11
    FALSE          shift, and go to state 12
    NIL            shift, and go to state 13
    STRING         shift, and go to state 14
    ID             shift, and go to state 15
    MINUS          shift, and go to state 16
    PLUS_PLUS      shift, and go to state 17
    MINUS_MINUS    shift, and go to state 18
    SEMICOLON      shift, and go to state 19
    DOUBLE_COLON   shift, and go to state 20
    LEFT_BRACE     shift, and go to state 21
    LEFT_SQUARE    shift, and go to state 22
    LEFT_BRACKETS  shift, and go to state 23

    program     go to state 24
    stmt        go to state 25
    expr        go to state 26
    term        go to state 27
    assignexpr  go to state 28
    primary     go to state 29
    lvalue      go to state 30
    member      go to state 31
    call        go to state 32
    objectdef   go to state 33
    indexed     go to state 34
    block       go to state 35
    funcdef     go to state 36
    const       go to state 37
    ifstmt      go to state 38
    whilestmt   go to state 39
    forstmt     go to state 40
    returnstmt  go to state 41


State 1

   64 const: NUMBER .

    $default  reduce using rule 64 (const)


State 2

   70 ifstmt: IF . LEFT_BRACKETS expr RIGHT_BRACKETS stmt LEFT_SQUARE ELSE stmt RIGHT_SQUARE

    LEFT_BRACKETS  shift, and go to state 42


State 3

   71 whilestmt: WHILE . LEFT_BRACKETS expr RIGHT_BRACKETS stmt

    LEFT_BRACKETS  shift, and go to state 43


State 4

   72 forstmt: FOR . LEFT_BRACKETS elist SEMICOLON expr SEMICOLON elist RIGHT_BRACKETS stmt

    LEFT_BRACKETS  shift, and go to state 44


State 5

   63 funcdef: FUNCTION . LEFT_SQUARE ID RIGHT_SQUARE LEFT_BRACKETS idlist RIGHT_BRACKETS block

    LEFT_SQUARE  shift, and go to state 45


State 6

   73 returnstmt: RETURN . LEFT_SQUARE expr RIGHT_SQUARE

    LEFT_SQUARE  shift, and go to state 46


State 7

    7 stmt: BREAK . SEMICOLON

    SEMICOLON  shift, and go to state 47


State 8

    8 stmt: CONTINUE . SEMICOLON

    SEMICOLON  shift, and go to state 48


State 9

   30 term: NOT . expr

    NUMBER         shift, and go to state 1
    NOT            shift, and go to state 9
    LOCAL          shift, and go to state 10
    TRUE           shift, and go to state 11
    FALSE          shift, and go to state 12
    NIL            shift, and go to state 13
    STRING         shift, and go to state 14
    ID             shift, and go to state 15
    MINUS          shift, and go to state 16
    PLUS_PLUS      shift, and go to state 17
    MINUS_MINUS    shift, and go to state 18
    DOUBLE_COLON   shift, and go to state 20
    LEFT_SQUARE    shift, and go to state 22
    LEFT_BRACKETS  shift, and go to state 23

    expr        go to state 49
    term        go to state 27
    assignexpr  go to state 28
    primary     go to state 29
    lvalue      go to state 30
    member      go to state 31
    call        go to state 32
    objectdef   go to state 33
    indexed     go to state 34
    const       go to state 37


State 10

   43 lvalue: LOCAL . ID

    ID  shift, and go to state 50


State 11

   67 const: TRUE .

    $default  reduce using rule 67 (const)


State 12

   68 const: FALSE .

    $default  reduce using rule 68 (const)


State 13

   66 const: NIL .

    $default  reduce using rule 66 (const)


State 14

   65 const: STRING .

    $default  reduce using rule 65 (const)


State 15

   42 lvalue: ID .

    $default  reduce using rule 42 (lvalue)


State 16

   29 term: MINUS . expr

    NUMBER         shift, and go to state 1
    NOT            shift, and go to state 9
    LOCAL          shift, and go to state 10
    TRUE           shift, and go to state 11
    FALSE          shift, and go to state 12
    NIL            shift, and go to state 13
    STRING         shift, and go to state 14
    ID             shift, and go to state 15
    MINUS          shift, and go to state 16
    PLUS_PLUS      shift, and go to state 17
    MINUS_MINUS    shift, and go to state 18
    DOUBLE_COLON   shift, and go to state 20
    LEFT_SQUARE    shift, and go to state 22
    LEFT_BRACKETS  shift, and go to state 23

    expr        go to state 51
    term        go to state 27
    assignexpr  go to state 28
    primary     go to state 29
    lvalue      go to state 30
    member      go to state 31
    call        go to state 32
    objectdef   go to state 33
    indexed     go to state 34
    const       go to state 37


State 17

   31 term: PLUS_PLUS . lvalue

    LOCAL          shift, and go to state 10
    ID             shift, and go to state 15
    DOUBLE_COLON   shift, and go to state 20
    LEFT_BRACKETS  shift, and go to state 52

    lvalue  go to state 53
    member  go to state 31
    call    go to state 54


State 18

   33 term: MINUS_MINUS . lvalue

    LOCAL          shift, and go to state 10
    ID             shift, and go to state 15
    DOUBLE_COLON   shift, and go to state 20
    LEFT_BRACKETS  shift, and go to state 52

    lvalue  go to state 55
    member  go to state 31
    call    go to state 54


State 19

   11 stmt: SEMICOLON .

    $default  reduce using rule 11 (stmt)


State 20

   44 lvalue: DOUBLE_COLON . ID

    ID  shift, and go to state 56


State 21

   62 block: LEFT_BRACE . LEFT_SQUARE stmt RIGHT_SQUARE RIGHT_BRACE

    LEFT_SQUARE  shift, and go to state 57


State 22

   58 objectdef: LEFT_SQUARE . LEFT_SQUARE elist
   60 indexed: LEFT_SQUARE . indexedelem LEFT_SQUARE COMMA indexedelem RIGHT_SQUARE RIGHT_SQUARE

    LEFT_BRACE   shift, and go to state 58
    LEFT_SQUARE  shift, and go to state 59

    indexedelem  go to state 60


State 23

   28 term: LEFT_BRACKETS . expr RIGHT_BRACKETS
   40 primary: LEFT_BRACKETS . funcdef RIGHT_BRACKETS
   52 call: LEFT_BRACKETS . funcdef RIGHT_BRACKETS LEFT_BRACKETS elist RIGHT_BRACKETS

    NUMBER         shift, and go to state 1
    FUNCTION       shift, and go to state 5
    NOT            shift, and go to state 9
    LOCAL          shift, and go to state 10
    TRUE           shift, and go to state 11
    FALSE          shift, and go to state 12
    NIL            shift, and go to state 13
    STRING         shift, and go to state 14
    ID             shift, and go to state 15
    MINUS          shift, and go to state 16
    PLUS_PLUS      shift, and go to state 17
    MINUS_MINUS    shift, and go to state 18
    DOUBLE_COLON   shift, and go to state 20
    LEFT_SQUARE    shift, and go to state 22
    LEFT_BRACKETS  shift, and go to state 23

    expr        go to state 61
    term        go to state 27
    assignexpr  go to state 28
    primary     go to state 29
    lvalue      go to state 30
    member      go to state 31
    call        go to state 32
    objectdef   go to state 33
    indexed     go to state 34
    funcdef     go to state 62
    const       go to state 37


State 24

    0 $accept: program . $end

    $end  shift, and go to state 63


State 25

    1 program: stmt .

    $default  reduce using rule 1 (program)


State 26

    2 stmt: expr .
   13 expr: expr . op expr

    AND             shift, and go to state 64
    OR              shift, and go to state 65
    EQUALS          shift, and go to state 66
    PLUS            shift, and go to state 67
    MINUS           shift, and go to state 68
    ASTERISK        shift, and go to state 69
    DIVISION        shift, and go to state 70
    PERCENT         shift, and go to state 71
    DIFFERENT       shift, and go to state 72
    GREATER         shift, and go to state 73
    LESS            shift, and go to state 74
    GREATER_EQUALS  shift, and go to state 75
    LESS_EQUALS     shift, and go to state 76

    $default  reduce using rule 2 (stmt)

    op  go to state 77


State 27

   14 expr: term .

    $default  reduce using rule 14 (expr)


State 28

   12 expr: assignexpr .

    $default  reduce using rule 12 (expr)


State 29

   35 term: primary .

    $default  reduce using rule 35 (term)


State 30

   32 term: lvalue . PLUS_PLUS
   34     | lvalue . MINUS_MINUS
   36 assignexpr: lvalue . ASSIGN expr
   37 primary: lvalue .
   46 member: lvalue . DOT ID
   47       | lvalue . LEFT_SQUARE expr RIGHT_SQUARE
   51 call: lvalue . callsuffix

    ASSIGN         shift, and go to state 78
    PLUS_PLUS      shift, and go to state 79
    MINUS_MINUS    shift, and go to state 80
    DOT            shift, and go to state 81
    Diaeresis      shift, and go to state 82
    LEFT_SQUARE    shift, and go to state 83
    LEFT_BRACKETS  shift, and go to state 84

    LEFT_SQUARE  [reduce using rule 37 (primary)]
    $default     reduce using rule 37 (primary)

    callsuffix  go to state 85
    normcall    go to state 86
    methodcall  go to state 87


State 31

   45 lvalue: member .

    $default  reduce using rule 45 (lvalue)


State 32

   38 primary: call .
   48 member: call . DOT ID
   49       | call . LEFT_SQUARE expr RIGHT_SQUARE
   50 call: call . LEFT_BRACKETS elist RIGHT_BRACKETS

    DOT            shift, and go to state 88
    LEFT_SQUARE    shift, and go to state 89
    LEFT_BRACKETS  shift, and go to state 90

    LEFT_SQUARE  [reduce using rule 38 (primary)]
    $default     reduce using rule 38 (primary)


State 33

   39 primary: objectdef .

    $default  reduce using rule 39 (primary)


State 34

   59 objectdef: indexed . RIGHT_SQUARE RIGHT_SQUARE

    RIGHT_SQUARE  shift, and go to state 91


State 35

    9 stmt: block .

    $default  reduce using rule 9 (stmt)


State 36

   10 stmt: funcdef .

    $default  reduce using rule 10 (stmt)


State 37

   41 primary: const .

    $default  reduce using rule 41 (primary)


State 38

    3 stmt: ifstmt .

    $default  reduce using rule 3 (stmt)


State 39

    4 stmt: whilestmt .

    $default  reduce using rule 4 (stmt)


State 40

    5 stmt: forstmt .

    $default  reduce using rule 5 (stmt)


State 41

    6 stmt: returnstmt .

    $default  reduce using rule 6 (stmt)


State 42

   70 ifstmt: IF LEFT_BRACKETS . expr RIGHT_BRACKETS stmt LEFT_SQUARE ELSE stmt RIGHT_SQUARE

    NUMBER         shift, and go to state 1
    NOT            shift, and go to state 9
    LOCAL          shift, and go to state 10
    TRUE           shift, and go to state 11
    FALSE          shift, and go to state 12
    NIL            shift, and go to state 13
    STRING         shift, and go to state 14
    ID             shift, and go to state 15
    MINUS          shift, and go to state 16
    PLUS_PLUS      shift, and go to state 17
    MINUS_MINUS    shift, and go to state 18
    DOUBLE_COLON   shift, and go to state 20
    LEFT_SQUARE    shift, and go to state 22
    LEFT_BRACKETS  shift, and go to state 23

    expr        go to state 92
    term        go to state 27
    assignexpr  go to state 28
    primary     go to state 29
    lvalue      go to state 30
    member      go to state 31
    call        go to state 32
    objectdef   go to state 33
    indexed     go to state 34
    const       go to state 37


State 43

   71 whilestmt: WHILE LEFT_BRACKETS . expr RIGHT_BRACKETS stmt

    NUMBER         shift, and go to state 1
    NOT            shift, and go to state 9
    LOCAL          shift, and go to state 10
    TRUE           shift, and go to state 11
    FALSE          shift, and go to state 12
    NIL            shift, and go to state 13
    STRING         shift, and go to state 14
    ID             shift, and go to state 15
    MINUS          shift, and go to state 16
    PLUS_PLUS      shift, and go to state 17
    MINUS_MINUS    shift, and go to state 18
    DOUBLE_COLON   shift, and go to state 20
    LEFT_SQUARE    shift, and go to state 22
    LEFT_BRACKETS  shift, and go to state 23

    expr        go to state 93
    term        go to state 27
    assignexpr  go to state 28
    primary     go to state 29
    lvalue      go to state 30
    member      go to state 31
    call        go to state 32
    objectdef   go to state 33
    indexed     go to state 34
    const       go to state 37


State 44

   72 forstmt: FOR LEFT_BRACKETS . elist SEMICOLON expr SEMICOLON elist RIGHT_BRACKETS stmt

    LEFT_SQUARE  shift, and go to state 94

    elist  go to state 95


State 45

   63 funcdef: FUNCTION LEFT_SQUARE . ID RIGHT_SQUARE LEFT_BRACKETS idlist RIGHT_BRACKETS block

    ID  shift, and go to state 96


State 46

   73 returnstmt: RETURN LEFT_SQUARE . expr RIGHT_SQUARE

    NUMBER         shift, and go to state 1
    NOT            shift, and go to state 9
    LOCAL          shift, and go to state 10
    TRUE           shift, and go to state 11
    FALSE          shift, and go to state 12
    NIL            shift, and go to state 13
    STRING         shift, and go to state 14
    ID             shift, and go to state 15
    MINUS          shift, and go to state 16
    PLUS_PLUS      shift, and go to state 17
    MINUS_MINUS    shift, and go to state 18
    DOUBLE_COLON   shift, and go to state 20
    LEFT_SQUARE    shift, and go to state 22
    LEFT_BRACKETS  shift, and go to state 23

    expr        go to state 97
    term        go to state 27
    assignexpr  go to state 28
    primary     go to state 29
    lvalue      go to state 30
    member      go to state 31
    call        go to state 32
    objectdef   go to state 33
    indexed     go to state 34
    const       go to state 37


State 47

    7 stmt: BREAK SEMICOLON .

    $default  reduce using rule 7 (stmt)


State 48

    8 stmt: CONTINUE SEMICOLON .

    $default  reduce using rule 8 (stmt)


State 49

   13 expr: expr . op expr
   30 term: NOT expr .

    AND             shift, and go to state 64
    OR              shift, and go to state 65
    EQUALS          shift, and go to state 66
    PLUS            shift, and go to state 67
    MINUS           shift, and go to state 68
    ASTERISK        shift, and go to state 69
    DIVISION        shift, and go to state 70
    PERCENT         shift, and go to state 71
    DIFFERENT       shift, and go to state 72
    GREATER         shift, and go to state 73
    LESS            shift, and go to state 74
    GREATER_EQUALS  shift, and go to state 75
    LESS_EQUALS     shift, and go to state 76

    AND             [reduce using rule 30 (term)]
    OR              [reduce using rule 30 (term)]
    EQUALS          [reduce using rule 30 (term)]
    PLUS            [reduce using rule 30 (term)]
    MINUS           [reduce using rule 30 (term)]
    ASTERISK        [reduce using rule 30 (term)]
    DIVISION        [reduce using rule 30 (term)]
    PERCENT         [reduce using rule 30 (term)]
    DIFFERENT       [reduce using rule 30 (term)]
    GREATER         [reduce using rule 30 (term)]
    LESS            [reduce using rule 30 (term)]
    GREATER_EQUALS  [reduce using rule 30 (term)]
    LESS_EQUALS     [reduce using rule 30 (term)]
    $default        reduce using rule 30 (term)

    op  go to state 77


State 50

   43 lvalue: LOCAL ID .

    $default  reduce using rule 43 (lvalue)


State 51

   13 expr: expr . op expr
   29 term: MINUS expr .

    AND             shift, and go to state 64
    OR              shift, and go to state 65
    EQUALS          shift, and go to state 66
    PLUS            shift, and go to state 67
    MINUS           shift, and go to state 68
    ASTERISK        shift, and go to state 69
    DIVISION        shift, and go to state 70
    PERCENT         shift, and go to state 71
    DIFFERENT       shift, and go to state 72
    GREATER         shift, and go to state 73
    LESS            shift, and go to state 74
    GREATER_EQUALS  shift, and go to state 75
    LESS_EQUALS     shift, and go to state 76

    AND             [reduce using rule 29 (term)]
    OR              [reduce using rule 29 (term)]
    EQUALS          [reduce using rule 29 (term)]
    PLUS            [reduce using rule 29 (term)]
    MINUS           [reduce using rule 29 (term)]
    ASTERISK        [reduce using rule 29 (term)]
    DIVISION        [reduce using rule 29 (term)]
    PERCENT         [reduce using rule 29 (term)]
    DIFFERENT       [reduce using rule 29 (term)]
    GREATER         [reduce using rule 29 (term)]
    LESS            [reduce using rule 29 (term)]
    GREATER_EQUALS  [reduce using rule 29 (term)]
    LESS_EQUALS     [reduce using rule 29 (term)]
    $default        reduce using rule 29 (term)

    op  go to state 77


State 52

   52 call: LEFT_BRACKETS . funcdef RIGHT_BRACKETS LEFT_BRACKETS elist RIGHT_BRACKETS

    FUNCTION  shift, and go to state 5

    funcdef  go to state 98


State 53

   31 term: PLUS_PLUS lvalue .
   46 member: lvalue . DOT ID
   47       | lvalue . LEFT_SQUARE expr RIGHT_SQUARE
   51 call: lvalue . callsuffix

    DOT            shift, and go to state 81
    Diaeresis      shift, and go to state 82
    LEFT_SQUARE    shift, and go to state 83
    LEFT_BRACKETS  shift, and go to state 84

    LEFT_SQUARE  [reduce using rule 31 (term)]
    $default     reduce using rule 31 (term)

    callsuffix  go to state 85
    normcall    go to state 86
    methodcall  go to state 87


State 54

   48 member: call . DOT ID
   49       | call . LEFT_SQUARE expr RIGHT_SQUARE
   50 call: call . LEFT_BRACKETS elist RIGHT_BRACKETS

    DOT            shift, and go to state 88
    LEFT_SQUARE    shift, and go to state 89
    LEFT_BRACKETS  shift, and go to state 90


State 55

   33 term: MINUS_MINUS lvalue .
   46 member: lvalue . DOT ID
   47       | lvalue . LEFT_SQUARE expr RIGHT_SQUARE
   51 call: lvalue . callsuffix

    DOT            shift, and go to state 81
    Diaeresis      shift, and go to state 82
    LEFT_SQUARE    shift, and go to state 83
    LEFT_BRACKETS  shift, and go to state 84

    LEFT_SQUARE  [reduce using rule 33 (term)]
    $default     reduce using rule 33 (term)

    callsuffix  go to state 85
    normcall    go to state 86
    methodcall  go to state 87


State 56

   44 lvalue: DOUBLE_COLON ID .

    $default  reduce using rule 44 (lvalue)


State 57

   62 block: LEFT_BRACE LEFT_SQUARE . stmt RIGHT_SQUARE RIGHT_BRACE

    NUMBER         shift, and go to state 1
    IF             shift, and go to state 2
    WHILE          shift, and go to state 3
    FOR            shift, and go to state 4
    FUNCTION       shift, and go to state 5
    RETURN         shift, and go to state 6
    BREAK          shift, and go to state 7
    CONTINUE       shift, and go to state 8
    NOT            shift, and go to state 9
    LOCAL          shift, and go to state 10
    TRUE           shift, and go to state 11
    FALSE          shift, and go to state 12
    NIL            shift, and go to state 13
    STRING         shift, and go to state 14
    ID             shift, and go to state 15
    MINUS          shift, and go to state 16
    PLUS_PLUS      shift, and go to state 17
    MINUS_MINUS    shift, and go to state 18
    SEMICOLON      shift, and go to state 19
    DOUBLE_COLON   shift, and go to state 20
    LEFT_BRACE     shift, and go to state 21
    LEFT_SQUARE    shift, and go to state 22
    LEFT_BRACKETS  shift, and go to state 23

    stmt        go to state 99
    expr        go to state 26
    term        go to state 27
    assignexpr  go to state 28
    primary     go to state 29
    lvalue      go to state 30
    member      go to state 31
    call        go to state 32
    objectdef   go to state 33
    indexed     go to state 34
    block       go to state 35
    funcdef     go to state 36
    const       go to state 37
    ifstmt      go to state 38
    whilestmt   go to state 39
    forstmt     go to state 40
    returnstmt  go to state 41


State 58

   61 indexedelem: LEFT_BRACE . expr COLON expr RIGHT_BRACE

    NUMBER         shift, and go to state 1
    NOT            shift, and go to state 9
    LOCAL          shift, and go to state 10
    TRUE           shift, and go to state 11
    FALSE          shift, and go to state 12
    NIL            shift, and go to state 13
    STRING         shift, and go to state 14
    ID             shift, and go to state 15
    MINUS          shift, and go to state 16
    PLUS_PLUS      shift, and go to state 17
    MINUS_MINUS    shift, and go to state 18
    DOUBLE_COLON   shift, and go to state 20
    LEFT_SQUARE    shift, and go to state 22
    LEFT_BRACKETS  shift, and go to state 23

    expr        go to state 100
    term        go to state 27
    assignexpr  go to state 28
    primary     go to state 29
    lvalue      go to state 30
    member      go to state 31
    call        go to state 32
    objectdef   go to state 33
    indexed     go to state 34
    const       go to state 37


State 59

   58 objectdef: LEFT_SQUARE LEFT_SQUARE . elist

    LEFT_SQUARE  shift, and go to state 94

    elist  go to state 101


State 60

   60 indexed: LEFT_SQUARE indexedelem . LEFT_SQUARE COMMA indexedelem RIGHT_SQUARE RIGHT_SQUARE

    LEFT_SQUARE  shift, and go to state 102


State 61

   13 expr: expr . op expr
   28 term: LEFT_BRACKETS expr . RIGHT_BRACKETS

    AND             shift, and go to state 64
    OR              shift, and go to state 65
    EQUALS          shift, and go to state 66
    PLUS            shift, and go to state 67
    MINUS           shift, and go to state 68
    ASTERISK        shift, and go to state 69
    DIVISION        shift, and go to state 70
    PERCENT         shift, and go to state 71
    DIFFERENT       shift, and go to state 72
    GREATER         shift, and go to state 73
    LESS            shift, and go to state 74
    GREATER_EQUALS  shift, and go to state 75
    LESS_EQUALS     shift, and go to state 76
    RIGHT_BRACKETS  shift, and go to state 103

    op  go to state 77


State 62

   40 primary: LEFT_BRACKETS funcdef . RIGHT_BRACKETS
   52 call: LEFT_BRACKETS funcdef . RIGHT_BRACKETS LEFT_BRACKETS elist RIGHT_BRACKETS

    RIGHT_BRACKETS  shift, and go to state 104


State 63

    0 $accept: program $end .

    $default  accept


State 64

   26 op: AND .

    $default  reduce using rule 26 (op)


State 65

   27 op: OR .

    $default  reduce using rule 27 (op)


State 66

   24 op: EQUALS .

    $default  reduce using rule 24 (op)


State 67

   15 op: PLUS .

    $default  reduce using rule 15 (op)


State 68

   16 op: MINUS .

    $default  reduce using rule 16 (op)


State 69

   17 op: ASTERISK .

    $default  reduce using rule 17 (op)


State 70

   18 op: DIVISION .

    $default  reduce using rule 18 (op)


State 71

   19 op: PERCENT .

    $default  reduce using rule 19 (op)


State 72

   25 op: DIFFERENT .

    $default  reduce using rule 25 (op)


State 73

   20 op: GREATER .

    $default  reduce using rule 20 (op)


State 74

   22 op: LESS .

    $default  reduce using rule 22 (op)


State 75

   21 op: GREATER_EQUALS .

    $default  reduce using rule 21 (op)


State 76

   23 op: LESS_EQUALS .

    $default  reduce using rule 23 (op)


State 77

   13 expr: expr op . expr

    NUMBER         shift, and go to state 1
    NOT            shift, and go to state 9
    LOCAL          shift, and go to state 10
    TRUE           shift, and go to state 11
    FALSE          shift, and go to state 12
    NIL            shift, and go to state 13
    STRING         shift, and go to state 14
    ID             shift, and go to state 15
    MINUS          shift, and go to state 16
    PLUS_PLUS      shift, and go to state 17
    MINUS_MINUS    shift, and go to state 18
    DOUBLE_COLON   shift, and go to state 20
    LEFT_SQUARE    shift, and go to state 22
    LEFT_BRACKETS  shift, and go to state 23

    expr        go to state 105
    term        go to state 27
    assignexpr  go to state 28
    primary     go to state 29
    lvalue      go to state 30
    member      go to state 31
    call        go to state 32
    objectdef   go to state 33
    indexed     go to state 34
    const       go to state 37


State 78

   36 assignexpr: lvalue ASSIGN . expr

    NUMBER         shift, and go to state 1
    NOT            shift, and go to state 9
    LOCAL          shift, and go to state 10
    TRUE           shift, and go to state 11
    FALSE          shift, and go to state 12
    NIL            shift, and go to state 13
    STRING         shift, and go to state 14
    ID             shift, and go to state 15
    MINUS          shift, and go to state 16
    PLUS_PLUS      shift, and go to state 17
    MINUS_MINUS    shift, and go to state 18
    DOUBLE_COLON   shift, and go to state 20
    LEFT_SQUARE    shift, and go to state 22
    LEFT_BRACKETS  shift, and go to state 23

    expr        go to state 106
    term        go to state 27
    assignexpr  go to state 28
    primary     go to state 29
    lvalue      go to state 30
    member      go to state 31
    call        go to state 32
    objectdef   go to state 33
    indexed     go to state 34
    const       go to state 37


State 79

   32 term: lvalue PLUS_PLUS .

    $default  reduce using rule 32 (term)


State 80

   34 term: lvalue MINUS_MINUS .

    $default  reduce using rule 34 (term)


State 81

   46 member: lvalue DOT . ID

    ID  shift, and go to state 107


State 82

   56 methodcall: Diaeresis . ID LEFT_BRACKETS elist RIGHT_BRACKETS

    ID  shift, and go to state 108


State 83

   47 member: lvalue LEFT_SQUARE . expr RIGHT_SQUARE

    NUMBER         shift, and go to state 1
    NOT            shift, and go to state 9
    LOCAL          shift, and go to state 10
    TRUE           shift, and go to state 11
    FALSE          shift, and go to state 12
    NIL            shift, and go to state 13
    STRING         shift, and go to state 14
    ID             shift, and go to state 15
    MINUS          shift, and go to state 16
    PLUS_PLUS      shift, and go to state 17
    MINUS_MINUS    shift, and go to state 18
    DOUBLE_COLON   shift, and go to state 20
    LEFT_SQUARE    shift, and go to state 22
    LEFT_BRACKETS  shift, and go to state 23

    expr        go to state 109
    term        go to state 27
    assignexpr  go to state 28
    primary     go to state 29
    lvalue      go to state 30
    member      go to state 31
    call        go to state 32
    objectdef   go to state 33
    indexed     go to state 34
    const       go to state 37


State 84

   55 normcall: LEFT_BRACKETS . elist RIGHT_BRACKETS

    LEFT_SQUARE  shift, and go to state 94

    elist  go to state 110


State 85

   51 call: lvalue callsuffix .

    $default  reduce using rule 51 (call)


State 86

   53 callsuffix: normcall .

    $default  reduce using rule 53 (callsuffix)


State 87

   54 callsuffix: methodcall .

    $default  reduce using rule 54 (callsuffix)


State 88

   48 member: call DOT . ID

    ID  shift, and go to state 111


State 89

   49 member: call LEFT_SQUARE . expr RIGHT_SQUARE

    NUMBER         shift, and go to state 1
    NOT            shift, and go to state 9
    LOCAL          shift, and go to state 10
    TRUE           shift, and go to state 11
    FALSE          shift, and go to state 12
    NIL            shift, and go to state 13
    STRING         shift, and go to state 14
    ID             shift, and go to state 15
    MINUS          shift, and go to state 16
    PLUS_PLUS      shift, and go to state 17
    MINUS_MINUS    shift, and go to state 18
    DOUBLE_COLON   shift, and go to state 20
    LEFT_SQUARE    shift, and go to state 22
    LEFT_BRACKETS  shift, and go to state 23

    expr        go to state 112
    term        go to state 27
    assignexpr  go to state 28
    primary     go to state 29
    lvalue      go to state 30
    member      go to state 31
    call        go to state 32
    objectdef   go to state 33
    indexed     go to state 34
    const       go to state 37


State 90

   50 call: call LEFT_BRACKETS . elist RIGHT_BRACKETS

    LEFT_SQUARE  shift, and go to state 94

    elist  go to state 113


State 91

   59 objectdef: indexed RIGHT_SQUARE . RIGHT_SQUARE

    RIGHT_SQUARE  shift, and go to state 114


State 92

   13 expr: expr . op expr
   70 ifstmt: IF LEFT_BRACKETS expr . RIGHT_BRACKETS stmt LEFT_SQUARE ELSE stmt RIGHT_SQUARE

    AND             shift, and go to state 64
    OR              shift, and go to state 65
    EQUALS          shift, and go to state 66
    PLUS            shift, and go to state 67
    MINUS           shift, and go to state 68
    ASTERISK        shift, and go to state 69
    DIVISION        shift, and go to state 70
    PERCENT         shift, and go to state 71
    DIFFERENT       shift, and go to state 72
    GREATER         shift, and go to state 73
    LESS            shift, and go to state 74
    GREATER_EQUALS  shift, and go to state 75
    LESS_EQUALS     shift, and go to state 76
    RIGHT_BRACKETS  shift, and go to state 115

    op  go to state 77


State 93

   13 expr: expr . op expr
   71 whilestmt: WHILE LEFT_BRACKETS expr . RIGHT_BRACKETS stmt

    AND             shift, and go to state 64
    OR              shift, and go to state 65
    EQUALS          shift, and go to state 66
    PLUS            shift, and go to state 67
    MINUS           shift, and go to state 68
    ASTERISK        shift, and go to state 69
    DIVISION        shift, and go to state 70
    PERCENT         shift, and go to state 71
    DIFFERENT       shift, and go to state 72
    GREATER         shift, and go to state 73
    LESS            shift, and go to state 74
    GREATER_EQUALS  shift, and go to state 75
    LESS_EQUALS     shift, and go to state 76
    RIGHT_BRACKETS  shift, and go to state 116

    op  go to state 77


State 94

   57 elist: LEFT_SQUARE . expr LEFT_SQUARE COMMA expr RIGHT_SQUARE RIGHT_SQUARE

    NUMBER         shift, and go to state 1
    NOT            shift, and go to state 9
    LOCAL          shift, and go to state 10
    TRUE           shift, and go to state 11
    FALSE          shift, and go to state 12
    NIL            shift, and go to state 13
    STRING         shift, and go to state 14
    ID             shift, and go to state 15
    MINUS          shift, and go to state 16
    PLUS_PLUS      shift, and go to state 17
    MINUS_MINUS    shift, and go to state 18
    DOUBLE_COLON   shift, and go to state 20
    LEFT_SQUARE    shift, and go to state 22
    LEFT_BRACKETS  shift, and go to state 23

    expr        go to state 117
    term        go to state 27
    assignexpr  go to state 28
    primary     go to state 29
    lvalue      go to state 30
    member      go to state 31
    call        go to state 32
    objectdef   go to state 33
    indexed     go to state 34
    const       go to state 37


State 95

   72 forstmt: FOR LEFT_BRACKETS elist . SEMICOLON expr SEMICOLON elist RIGHT_BRACKETS stmt

    SEMICOLON  shift, and go to state 118


State 96

   63 funcdef: FUNCTION LEFT_SQUARE ID . RIGHT_SQUARE LEFT_BRACKETS idlist RIGHT_BRACKETS block

    RIGHT_SQUARE  shift, and go to state 119


State 97

   13 expr: expr . op expr
   73 returnstmt: RETURN LEFT_SQUARE expr . RIGHT_SQUARE

    AND             shift, and go to state 64
    OR              shift, and go to state 65
    EQUALS          shift, and go to state 66
    PLUS            shift, and go to state 67
    MINUS           shift, and go to state 68
    ASTERISK        shift, and go to state 69
    DIVISION        shift, and go to state 70
    PERCENT         shift, and go to state 71
    DIFFERENT       shift, and go to state 72
    GREATER         shift, and go to state 73
    LESS            shift, and go to state 74
    GREATER_EQUALS  shift, and go to state 75
    LESS_EQUALS     shift, and go to state 76
    RIGHT_SQUARE    shift, and go to state 120

    op  go to state 77


State 98

   52 call: LEFT_BRACKETS funcdef . RIGHT_BRACKETS LEFT_BRACKETS elist RIGHT_BRACKETS

    RIGHT_BRACKETS  shift, and go to state 121


State 99

   62 block: LEFT_BRACE LEFT_SQUARE stmt . RIGHT_SQUARE RIGHT_BRACE

    RIGHT_SQUARE  shift, and go to state 122


State 100

   13 expr: expr . op expr
   61 indexedelem: LEFT_BRACE expr . COLON expr RIGHT_BRACE

    AND             shift, and go to state 64
    OR              shift, and go to state 65
    EQUALS          shift, and go to state 66
    PLUS            shift, and go to state 67
    MINUS           shift, and go to state 68
    ASTERISK        shift, and go to state 69
    DIVISION        shift, and go to state 70
    PERCENT         shift, and go to state 71
    DIFFERENT       shift, and go to state 72
    GREATER         shift, and go to state 73
    LESS            shift, and go to state 74
    GREATER_EQUALS  shift, and go to state 75
    LESS_EQUALS     shift, and go to state 76
    COLON           shift, and go to state 123

    op  go to state 77


State 101

   58 objectdef: LEFT_SQUARE LEFT_SQUARE elist .

    $default  reduce using rule 58 (objectdef)


State 102

   60 indexed: LEFT_SQUARE indexedelem LEFT_SQUARE . COMMA indexedelem RIGHT_SQUARE RIGHT_SQUARE

    COMMA  shift, and go to state 124


State 103

   28 term: LEFT_BRACKETS expr RIGHT_BRACKETS .

    $default  reduce using rule 28 (term)


State 104

   40 primary: LEFT_BRACKETS funcdef RIGHT_BRACKETS .
   52 call: LEFT_BRACKETS funcdef RIGHT_BRACKETS . LEFT_BRACKETS elist RIGHT_BRACKETS

    LEFT_BRACKETS  shift, and go to state 125

    $default  reduce using rule 40 (primary)


State 105

   13 expr: expr . op expr
   13     | expr op expr .

    AND             shift, and go to state 64
    OR              shift, and go to state 65
    EQUALS          shift, and go to state 66
    PLUS            shift, and go to state 67
    MINUS           shift, and go to state 68
    ASTERISK        shift, and go to state 69
    DIVISION        shift, and go to state 70
    PERCENT         shift, and go to state 71
    DIFFERENT       shift, and go to state 72
    GREATER         shift, and go to state 73
    LESS            shift, and go to state 74
    GREATER_EQUALS  shift, and go to state 75
    LESS_EQUALS     shift, and go to state 76

    AND             [reduce using rule 13 (expr)]
    OR              [reduce using rule 13 (expr)]
    EQUALS          [reduce using rule 13 (expr)]
    PLUS            [reduce using rule 13 (expr)]
    MINUS           [reduce using rule 13 (expr)]
    ASTERISK        [reduce using rule 13 (expr)]
    DIVISION        [reduce using rule 13 (expr)]
    PERCENT         [reduce using rule 13 (expr)]
    DIFFERENT       [reduce using rule 13 (expr)]
    GREATER         [reduce using rule 13 (expr)]
    LESS            [reduce using rule 13 (expr)]
    GREATER_EQUALS  [reduce using rule 13 (expr)]
    LESS_EQUALS     [reduce using rule 13 (expr)]
    $default        reduce using rule 13 (expr)

    op  go to state 77


State 106

   13 expr: expr . op expr
   36 assignexpr: lvalue ASSIGN expr .

    AND             shift, and go to state 64
    OR              shift, and go to state 65
    EQUALS          shift, and go to state 66
    PLUS            shift, and go to state 67
    MINUS           shift, and go to state 68
    ASTERISK        shift, and go to state 69
    DIVISION        shift, and go to state 70
    PERCENT         shift, and go to state 71
    DIFFERENT       shift, and go to state 72
    GREATER         shift, and go to state 73
    LESS            shift, and go to state 74
    GREATER_EQUALS  shift, and go to state 75
    LESS_EQUALS     shift, and go to state 76

    AND             [reduce using rule 36 (assignexpr)]
    OR              [reduce using rule 36 (assignexpr)]
    EQUALS          [reduce using rule 36 (assignexpr)]
    PLUS            [reduce using rule 36 (assignexpr)]
    MINUS           [reduce using rule 36 (assignexpr)]
    ASTERISK        [reduce using rule 36 (assignexpr)]
    DIVISION        [reduce using rule 36 (assignexpr)]
    PERCENT         [reduce using rule 36 (assignexpr)]
    DIFFERENT       [reduce using rule 36 (assignexpr)]
    GREATER         [reduce using rule 36 (assignexpr)]
    LESS            [reduce using rule 36 (assignexpr)]
    GREATER_EQUALS  [reduce using rule 36 (assignexpr)]
    LESS_EQUALS     [reduce using rule 36 (assignexpr)]
    $default        reduce using rule 36 (assignexpr)

    op  go to state 77


State 107

   46 member: lvalue DOT ID .

    $default  reduce using rule 46 (member)


State 108

   56 methodcall: Diaeresis ID . LEFT_BRACKETS elist RIGHT_BRACKETS

    LEFT_BRACKETS  shift, and go to state 126


State 109

   13 expr: expr . op expr
   47 member: lvalue LEFT_SQUARE expr . RIGHT_SQUARE

    AND             shift, and go to state 64
    OR              shift, and go to state 65
    EQUALS          shift, and go to state 66
    PLUS            shift, and go to state 67
    MINUS           shift, and go to state 68
    ASTERISK        shift, and go to state 69
    DIVISION        shift, and go to state 70
    PERCENT         shift, and go to state 71
    DIFFERENT       shift, and go to state 72
    GREATER         shift, and go to state 73
    LESS            shift, and go to state 74
    GREATER_EQUALS  shift, and go to state 75
    LESS_EQUALS     shift, and go to state 76
    RIGHT_SQUARE    shift, and go to state 127

    op  go to state 77


State 110

   55 normcall: LEFT_BRACKETS elist . RIGHT_BRACKETS

    RIGHT_BRACKETS  shift, and go to state 128


State 111

   48 member: call DOT ID .

    $default  reduce using rule 48 (member)


State 112

   13 expr: expr . op expr
   49 member: call LEFT_SQUARE expr . RIGHT_SQUARE

    AND             shift, and go to state 64
    OR              shift, and go to state 65
    EQUALS          shift, and go to state 66
    PLUS            shift, and go to state 67
    MINUS           shift, and go to state 68
    ASTERISK        shift, and go to state 69
    DIVISION        shift, and go to state 70
    PERCENT         shift, and go to state 71
    DIFFERENT       shift, and go to state 72
    GREATER         shift, and go to state 73
    LESS            shift, and go to state 74
    GREATER_EQUALS  shift, and go to state 75
    LESS_EQUALS     shift, and go to state 76
    RIGHT_SQUARE    shift, and go to state 129

    op  go to state 77


State 113

   50 call: call LEFT_BRACKETS elist . RIGHT_BRACKETS

    RIGHT_BRACKETS  shift, and go to state 130


State 114

   59 objectdef: indexed RIGHT_SQUARE RIGHT_SQUARE .

    $default  reduce using rule 59 (objectdef)


State 115

   70 ifstmt: IF LEFT_BRACKETS expr RIGHT_BRACKETS . stmt LEFT_SQUARE ELSE stmt RIGHT_SQUARE

    NUMBER         shift, and go to state 1
    IF             shift, and go to state 2
    WHILE          shift, and go to state 3
    FOR            shift, and go to state 4
    FUNCTION       shift, and go to state 5
    RETURN         shift, and go to state 6
    BREAK          shift, and go to state 7
    CONTINUE       shift, and go to state 8
    NOT            shift, and go to state 9
    LOCAL          shift, and go to state 10
    TRUE           shift, and go to state 11
    FALSE          shift, and go to state 12
    NIL            shift, and go to state 13
    STRING         shift, and go to state 14
    ID             shift, and go to state 15
    MINUS          shift, and go to state 16
    PLUS_PLUS      shift, and go to state 17
    MINUS_MINUS    shift, and go to state 18
    SEMICOLON      shift, and go to state 19
    DOUBLE_COLON   shift, and go to state 20
    LEFT_BRACE     shift, and go to state 21
    LEFT_SQUARE    shift, and go to state 22
    LEFT_BRACKETS  shift, and go to state 23

    stmt        go to state 131
    expr        go to state 26
    term        go to state 27
    assignexpr  go to state 28
    primary     go to state 29
    lvalue      go to state 30
    member      go to state 31
    call        go to state 32
    objectdef   go to state 33
    indexed     go to state 34
    block       go to state 35
    funcdef     go to state 36
    const       go to state 37
    ifstmt      go to state 38
    whilestmt   go to state 39
    forstmt     go to state 40
    returnstmt  go to state 41


State 116

   71 whilestmt: WHILE LEFT_BRACKETS expr RIGHT_BRACKETS . stmt

    NUMBER         shift, and go to state 1
    IF             shift, and go to state 2
    WHILE          shift, and go to state 3
    FOR            shift, and go to state 4
    FUNCTION       shift, and go to state 5
    RETURN         shift, and go to state 6
    BREAK          shift, and go to state 7
    CONTINUE       shift, and go to state 8
    NOT            shift, and go to state 9
    LOCAL          shift, and go to state 10
    TRUE           shift, and go to state 11
    FALSE          shift, and go to state 12
    NIL            shift, and go to state 13
    STRING         shift, and go to state 14
    ID             shift, and go to state 15
    MINUS          shift, and go to state 16
    PLUS_PLUS      shift, and go to state 17
    MINUS_MINUS    shift, and go to state 18
    SEMICOLON      shift, and go to state 19
    DOUBLE_COLON   shift, and go to state 20
    LEFT_BRACE     shift, and go to state 21
    LEFT_SQUARE    shift, and go to state 22
    LEFT_BRACKETS  shift, and go to state 23

    stmt        go to state 132
    expr        go to state 26
    term        go to state 27
    assignexpr  go to state 28
    primary     go to state 29
    lvalue      go to state 30
    member      go to state 31
    call        go to state 32
    objectdef   go to state 33
    indexed     go to state 34
    block       go to state 35
    funcdef     go to state 36
    const       go to state 37
    ifstmt      go to state 38
    whilestmt   go to state 39
    forstmt     go to state 40
    returnstmt  go to state 41


State 117

   13 expr: expr . op expr
   57 elist: LEFT_SQUARE expr . LEFT_SQUARE COMMA expr RIGHT_SQUARE RIGHT_SQUARE

    AND             shift, and go to state 64
    OR              shift, and go to state 65
    EQUALS          shift, and go to state 66
    PLUS            shift, and go to state 67
    MINUS           shift, and go to state 68
    ASTERISK        shift, and go to state 69
    DIVISION        shift, and go to state 70
    PERCENT         shift, and go to state 71
    DIFFERENT       shift, and go to state 72
    GREATER         shift, and go to state 73
    LESS            shift, and go to state 74
    GREATER_EQUALS  shift, and go to state 75
    LESS_EQUALS     shift, and go to state 76
    LEFT_SQUARE     shift, and go to state 133

    op  go to state 77


State 118

   72 forstmt: FOR LEFT_BRACKETS elist SEMICOLON . expr SEMICOLON elist RIGHT_BRACKETS stmt

    NUMBER         shift, and go to state 1
    NOT            shift, and go to state 9
    LOCAL          shift, and go to state 10
    TRUE           shift, and go to state 11
    FALSE          shift, and go to state 12
    NIL            shift, and go to state 13
    STRING         shift, and go to state 14
    ID             shift, and go to state 15
    MINUS          shift, and go to state 16
    PLUS_PLUS      shift, and go to state 17
    MINUS_MINUS    shift, and go to state 18
    DOUBLE_COLON   shift, and go to state 20
    LEFT_SQUARE    shift, and go to state 22
    LEFT_BRACKETS  shift, and go to state 23

    expr        go to state 134
    term        go to state 27
    assignexpr  go to state 28
    primary     go to state 29
    lvalue      go to state 30
    member      go to state 31
    call        go to state 32
    objectdef   go to state 33
    indexed     go to state 34
    const       go to state 37


State 119

   63 funcdef: FUNCTION LEFT_SQUARE ID RIGHT_SQUARE . LEFT_BRACKETS idlist RIGHT_BRACKETS block

    LEFT_BRACKETS  shift, and go to state 135


State 120

   73 returnstmt: RETURN LEFT_SQUARE expr RIGHT_SQUARE .

    $default  reduce using rule 73 (returnstmt)


State 121

   52 call: LEFT_BRACKETS funcdef RIGHT_BRACKETS . LEFT_BRACKETS elist RIGHT_BRACKETS

    LEFT_BRACKETS  shift, and go to state 125


State 122

   62 block: LEFT_BRACE LEFT_SQUARE stmt RIGHT_SQUARE . RIGHT_BRACE

    RIGHT_BRACE  shift, and go to state 136


State 123

   61 indexedelem: LEFT_BRACE expr COLON . expr RIGHT_BRACE

    NUMBER         shift, and go to state 1
    NOT            shift, and go to state 9
    LOCAL          shift, and go to state 10
    TRUE           shift, and go to state 11
    FALSE          shift, and go to state 12
    NIL            shift, and go to state 13
    STRING         shift, and go to state 14
    ID             shift, and go to state 15
    MINUS          shift, and go to state 16
    PLUS_PLUS      shift, and go to state 17
    MINUS_MINUS    shift, and go to state 18
    DOUBLE_COLON   shift, and go to state 20
    LEFT_SQUARE    shift, and go to state 22
    LEFT_BRACKETS  shift, and go to state 23

    expr        go to state 137
    term        go to state 27
    assignexpr  go to state 28
    primary     go to state 29
    lvalue      go to state 30
    member      go to state 31
    call        go to state 32
    objectdef   go to state 33
    indexed     go to state 34
    const       go to state 37


State 124

   60 indexed: LEFT_SQUARE indexedelem LEFT_SQUARE COMMA . indexedelem RIGHT_SQUARE RIGHT_SQUARE

    LEFT_BRACE  shift, and go to state 58

    indexedelem  go to state 138


State 125

   52 call: LEFT_BRACKETS funcdef RIGHT_BRACKETS LEFT_BRACKETS . elist RIGHT_BRACKETS

    LEFT_SQUARE  shift, and go to state 94

    elist  go to state 139


State 126

   56 methodcall: Diaeresis ID LEFT_BRACKETS . elist RIGHT_BRACKETS

    LEFT_SQUARE  shift, and go to state 94

    elist  go to state 140


State 127

   47 member: lvalue LEFT_SQUARE expr RIGHT_SQUARE .

    $default  reduce using rule 47 (member)


State 128

   55 normcall: LEFT_BRACKETS elist RIGHT_BRACKETS .

    $default  reduce using rule 55 (normcall)


State 129

   49 member: call LEFT_SQUARE expr RIGHT_SQUARE .

    $default  reduce using rule 49 (member)


State 130

   50 call: call LEFT_BRACKETS elist RIGHT_BRACKETS .

    $default  reduce using rule 50 (call)


State 131

   70 ifstmt: IF LEFT_BRACKETS expr RIGHT_BRACKETS stmt . LEFT_SQUARE ELSE stmt RIGHT_SQUARE

    LEFT_SQUARE  shift, and go to state 141


State 132

   71 whilestmt: WHILE LEFT_BRACKETS expr RIGHT_BRACKETS stmt .

    $default  reduce using rule 71 (whilestmt)


State 133

   57 elist: LEFT_SQUARE expr LEFT_SQUARE . COMMA expr RIGHT_SQUARE RIGHT_SQUARE

    COMMA  shift, and go to state 142


State 134

   13 expr: expr . op expr
   72 forstmt: FOR LEFT_BRACKETS elist SEMICOLON expr . SEMICOLON elist RIGHT_BRACKETS stmt

    AND             shift, and go to state 64
    OR              shift, and go to state 65
    EQUALS          shift, and go to state 66
    PLUS            shift, and go to state 67
    MINUS           shift, and go to state 68
    ASTERISK        shift, and go to state 69
    DIVISION        shift, and go to state 70
    PERCENT         shift, and go to state 71
    DIFFERENT       shift, and go to state 72
    GREATER         shift, and go to state 73
    LESS            shift, and go to state 74
    GREATER_EQUALS  shift, and go to state 75
    LESS_EQUALS     shift, and go to state 76
    SEMICOLON       shift, and go to state 143

    op  go to state 77


State 135

   63 funcdef: FUNCTION LEFT_SQUARE ID RIGHT_SQUARE LEFT_BRACKETS . idlist RIGHT_BRACKETS block

    LEFT_SQUARE  shift, and go to state 144

    idlist  go to state 145


State 136

   62 block: LEFT_BRACE LEFT_SQUARE stmt RIGHT_SQUARE RIGHT_BRACE .

    $default  reduce using rule 62 (block)


State 137

   13 expr: expr . op expr
   61 indexedelem: LEFT_BRACE expr COLON expr . RIGHT_BRACE

    AND             shift, and go to state 64
    OR              shift, and go to state 65
    EQUALS          shift, and go to state 66
    PLUS            shift, and go to state 67
    MINUS           shift, and go to state 68
    ASTERISK        shift, and go to state 69
    DIVISION        shift, and go to state 70
    PERCENT         shift, and go to state 71
    DIFFERENT       shift, and go to state 72
    GREATER         shift, and go to state 73
    LESS            shift, and go to state 74
    GREATER_EQUALS  shift, and go to state 75
    LESS_EQUALS     shift, and go to state 76
    RIGHT_BRACE     shift, and go to state 146

    op  go to state 77


State 138

   60 indexed: LEFT_SQUARE indexedelem LEFT_SQUARE COMMA indexedelem . RIGHT_SQUARE RIGHT_SQUARE

    RIGHT_SQUARE  shift, and go to state 147


State 139

   52 call: LEFT_BRACKETS funcdef RIGHT_BRACKETS LEFT_BRACKETS elist . RIGHT_BRACKETS

    RIGHT_BRACKETS  shift, and go to state 148


State 140

   56 methodcall: Diaeresis ID LEFT_BRACKETS elist . RIGHT_BRACKETS

    RIGHT_BRACKETS  shift, and go to state 149


State 141

   70 ifstmt: IF LEFT_BRACKETS expr RIGHT_BRACKETS stmt LEFT_SQUARE . ELSE stmt RIGHT_SQUARE

    ELSE  shift, and go to state 150


State 142

   57 elist: LEFT_SQUARE expr LEFT_SQUARE COMMA . expr RIGHT_SQUARE RIGHT_SQUARE

    NUMBER         shift, and go to state 1
    NOT            shift, and go to state 9
    LOCAL          shift, and go to state 10
    TRUE           shift, and go to state 11
    FALSE          shift, and go to state 12
    NIL            shift, and go to state 13
    STRING         shift, and go to state 14
    ID             shift, and go to state 15
    MINUS          shift, and go to state 16
    PLUS_PLUS      shift, and go to state 17
    MINUS_MINUS    shift, and go to state 18
    DOUBLE_COLON   shift, and go to state 20
    LEFT_SQUARE    shift, and go to state 22
    LEFT_BRACKETS  shift, and go to state 23

    expr        go to state 151
    term        go to state 27
    assignexpr  go to state 28
    primary     go to state 29
    lvalue      go to state 30
    member      go to state 31
    call        go to state 32
    objectdef   go to state 33
    indexed     go to state 34
    const       go to state 37


State 143

   72 forstmt: FOR LEFT_BRACKETS elist SEMICOLON expr SEMICOLON . elist RIGHT_BRACKETS stmt

    LEFT_SQUARE  shift, and go to state 94

    elist  go to state 152


State 144

   69 idlist: LEFT_SQUARE . ID LEFT_SQUARE COMMA ID RIGHT_SQUARE RIGHT_SQUARE

    ID  shift, and go to state 153


State 145

   63 funcdef: FUNCTION LEFT_SQUARE ID RIGHT_SQUARE LEFT_BRACKETS idlist . RIGHT_BRACKETS block

    RIGHT_BRACKETS  shift, and go to state 154


State 146

   61 indexedelem: LEFT_BRACE expr COLON expr RIGHT_BRACE .

    $default  reduce using rule 61 (indexedelem)


State 147

   60 indexed: LEFT_SQUARE indexedelem LEFT_SQUARE COMMA indexedelem RIGHT_SQUARE . RIGHT_SQUARE

    RIGHT_SQUARE  shift, and go to state 155


State 148

   52 call: LEFT_BRACKETS funcdef RIGHT_BRACKETS LEFT_BRACKETS elist RIGHT_BRACKETS .

    $default  reduce using rule 52 (call)


State 149

   56 methodcall: Diaeresis ID LEFT_BRACKETS elist RIGHT_BRACKETS .

    $default  reduce using rule 56 (methodcall)


State 150

   70 ifstmt: IF LEFT_BRACKETS expr RIGHT_BRACKETS stmt LEFT_SQUARE ELSE . stmt RIGHT_SQUARE

    NUMBER         shift, and go to state 1
    IF             shift, and go to state 2
    WHILE          shift, and go to state 3
    FOR            shift, and go to state 4
    FUNCTION       shift, and go to state 5
    RETURN         shift, and go to state 6
    BREAK          shift, and go to state 7
    CONTINUE       shift, and go to state 8
    NOT            shift, and go to state 9
    LOCAL          shift, and go to state 10
    TRUE           shift, and go to state 11
    FALSE          shift, and go to state 12
    NIL            shift, and go to state 13
    STRING         shift, and go to state 14
    ID             shift, and go to state 15
    MINUS          shift, and go to state 16
    PLUS_PLUS      shift, and go to state 17
    MINUS_MINUS    shift, and go to state 18
    SEMICOLON      shift, and go to state 19
    DOUBLE_COLON   shift, and go to state 20
    LEFT_BRACE     shift, and go to state 21
    LEFT_SQUARE    shift, and go to state 22
    LEFT_BRACKETS  shift, and go to state 23

    stmt        go to state 156
    expr        go to state 26
    term        go to state 27
    assignexpr  go to state 28
    primary     go to state 29
    lvalue      go to state 30
    member      go to state 31
    call        go to state 32
    objectdef   go to state 33
    indexed     go to state 34
    block       go to state 35
    funcdef     go to state 36
    const       go to state 37
    ifstmt      go to state 38
    whilestmt   go to state 39
    forstmt     go to state 40
    returnstmt  go to state 41


State 151

   13 expr: expr . op expr
   57 elist: LEFT_SQUARE expr LEFT_SQUARE COMMA expr . RIGHT_SQUARE RIGHT_SQUARE

    AND             shift, and go to state 64
    OR              shift, and go to state 65
    EQUALS          shift, and go to state 66
    PLUS            shift, and go to state 67
    MINUS           shift, and go to state 68
    ASTERISK        shift, and go to state 69
    DIVISION        shift, and go to state 70
    PERCENT         shift, and go to state 71
    DIFFERENT       shift, and go to state 72
    GREATER         shift, and go to state 73
    LESS            shift, and go to state 74
    GREATER_EQUALS  shift, and go to state 75
    LESS_EQUALS     shift, and go to state 76
    RIGHT_SQUARE    shift, and go to state 157

    op  go to state 77


State 152

   72 forstmt: FOR LEFT_BRACKETS elist SEMICOLON expr SEMICOLON elist . RIGHT_BRACKETS stmt

    RIGHT_BRACKETS  shift, and go to state 158


State 153

   69 idlist: LEFT_SQUARE ID . LEFT_SQUARE COMMA ID RIGHT_SQUARE RIGHT_SQUARE

    LEFT_SQUARE  shift, and go to state 159


State 154

   63 funcdef: FUNCTION LEFT_SQUARE ID RIGHT_SQUARE LEFT_BRACKETS idlist RIGHT_BRACKETS . block

    LEFT_BRACE  shift, and go to state 21

    block  go to state 160


State 155

   60 indexed: LEFT_SQUARE indexedelem LEFT_SQUARE COMMA indexedelem RIGHT_SQUARE RIGHT_SQUARE .

    $default  reduce using rule 60 (indexed)


State 156

   70 ifstmt: IF LEFT_BRACKETS expr RIGHT_BRACKETS stmt LEFT_SQUARE ELSE stmt . RIGHT_SQUARE

    RIGHT_SQUARE  shift, and go to state 161


State 157

   57 elist: LEFT_SQUARE expr LEFT_SQUARE COMMA expr RIGHT_SQUARE . RIGHT_SQUARE

    RIGHT_SQUARE  shift, and go to state 162


State 158

   72 forstmt: FOR LEFT_BRACKETS elist SEMICOLON expr SEMICOLON elist RIGHT_BRACKETS . stmt

    NUMBER         shift, and go to state 1
    IF             shift, and go to state 2
    WHILE          shift, and go to state 3
    FOR            shift, and go to state 4
    FUNCTION       shift, and go to state 5
    RETURN         shift, and go to state 6
    BREAK          shift, and go to state 7
    CONTINUE       shift, and go to state 8
    NOT            shift, and go to state 9
    LOCAL          shift, and go to state 10
    TRUE           shift, and go to state 11
    FALSE          shift, and go to state 12
    NIL            shift, and go to state 13
    STRING         shift, and go to state 14
    ID             shift, and go to state 15
    MINUS          shift, and go to state 16
    PLUS_PLUS      shift, and go to state 17
    MINUS_MINUS    shift, and go to state 18
    SEMICOLON      shift, and go to state 19
    DOUBLE_COLON   shift, and go to state 20
    LEFT_BRACE     shift, and go to state 21
    LEFT_SQUARE    shift, and go to state 22
    LEFT_BRACKETS  shift, and go to state 23

    stmt        go to state 163
    expr        go to state 26
    term        go to state 27
    assignexpr  go to state 28
    primary     go to state 29
    lvalue      go to state 30
    member      go to state 31
    call        go to state 32
    objectdef   go to state 33
    indexed     go to state 34
    block       go to state 35
    funcdef     go to state 36
    const       go to state 37
    ifstmt      go to state 38
    whilestmt   go to state 39
    forstmt     go to state 40
    returnstmt  go to state 41


State 159

   69 idlist: LEFT_SQUARE ID LEFT_SQUARE . COMMA ID RIGHT_SQUARE RIGHT_SQUARE

    COMMA  shift, and go to state 164


State 160

   63 funcdef: FUNCTION LEFT_SQUARE ID RIGHT_SQUARE LEFT_BRACKETS idlist RIGHT_BRACKETS block .

    $default  reduce using rule 63 (funcdef)


State 161

   70 ifstmt: IF LEFT_BRACKETS expr RIGHT_BRACKETS stmt LEFT_SQUARE ELSE stmt RIGHT_SQUARE .

    $default  reduce using rule 70 (ifstmt)


State 162

   57 elist: LEFT_SQUARE expr LEFT_SQUARE COMMA expr RIGHT_SQUARE RIGHT_SQUARE .

    $default  reduce using rule 57 (elist)


State 163

   72 forstmt: FOR LEFT_BRACKETS elist SEMICOLON expr SEMICOLON elist RIGHT_BRACKETS stmt .

    $default  reduce using rule 72 (forstmt)


State 164

   69 idlist: LEFT_SQUARE ID LEFT_SQUARE COMMA . ID RIGHT_SQUARE RIGHT_SQUARE

    ID  shift, and go to state 165


State 165

   69 idlist: LEFT_SQUARE ID LEFT_SQUARE COMMA ID . RIGHT_SQUARE RIGHT_SQUARE

    RIGHT_SQUARE  shift, and go to state 166


State 166

   69 idlist: LEFT_SQUARE ID LEFT_SQUARE COMMA ID RIGHT_SQUARE . RIGHT_SQUARE

    RIGHT_SQUARE  shift, and go to state 167


State 167

   69 idlist: LEFT_SQUARE ID LEFT_SQUARE COMMA ID RIGHT_SQUARE RIGHT_SQUARE .

    $default  reduce using rule 69 (idlist)
