Terminals unused in grammar

   REAL


State 7 conflicts: 14 shift/reduce
State 22 conflicts: 1 shift/reduce, 1 reduce/reduce
State 31 conflicts: 4 shift/reduce
State 33 conflicts: 2 shift/reduce
State 47 conflicts: 1 shift/reduce
State 50 conflicts: 1 shift/reduce
State 52 conflicts: 1 shift/reduce
State 113 conflicts: 13 shift/reduce
State 114 conflicts: 1 shift/reduce
State 139 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: statements

    2 stmt: expr SEMICOLON
    3     | ifstmt
    4     | whilestmt
    5     | forstmt
    6     | returnstmt
    7     | BREAK SEMICOLON
    8     | CONTINUE SEMICOLON
    9     | block
   10     | funcdef
   11     | SEMICOLON

   12 statements: statements stmt
   13           | stmt

   14 expr: assignexpr
   15     | expr op expr
   16     | term

   17 op: PLUS
   18   | MINUS
   19   | ASTERISK
   20   | DIVISION
   21   | PERCENT
   22   | GREATER
   23   | GREATER_EQUALS
   24   | LESS
   25   | LESS_EQUALS
   26   | EQUALS
   27   | DIFFERENT
   28   | AND
   29   | OR

   30 term: LEFT_BRACKETS expr RIGHT_BRACKETS
   31     | MINUS expr
   32     | NOT expr
   33     | PLUS_PLUS lvalue
   34     | lvalue PLUS_PLUS
   35     | MINUS_MINUS lvalue
   36     | lvalue MINUS_MINUS
   37     | primary

   38 assignexpr: lvalue ASSIGN expr

   39 primary: lvalue
   40        | call
   41        | objectdef
   42        | LEFT_BRACKETS funcdef RIGHT_BRACKETS
   43        | const

   44 lvalue: ID
   45       | LOCAl ID
   46       | DOUBLE_COLON ID
   47       | member

   48 member: lvalue DOT ID
   49       | lvalue LEFT_SQUARE expr RIGHT_SQUARE
   50       | call DOT ID
   51       | call LEFT_SQUARE expr RIGHT_SQUARE

   52 call: call LEFT_BRACKETS elist RIGHT_BRACKETS
   53     | lvalue callsuffix
   54     | LEFT_BRACKETS funcdef RIGHT_BRACKETS LEFT_BRACKETS elist RIGHT_BRACKETS

   55 callsuffix: normcall
   56           | methodcall

   57 normcall: LEFT_BRACKETS elist RIGHT_BRACKETS

   58 methodcall: Diaeresis ID LEFT_BRACKETS elist RIGHT_BRACKETS

   59 elist: expr
   60      | expr COMMA elist
   61      | %empty

   62 objectdef: LEFT_SQUARE elist RIGHT_SQUARE
   63          | LEFT_SQUARE indexed RIGHT_SQUARE
   64          | LEFT_SQUARE RIGHT_SQUARE

   65 indexed: indexedelem
   66        | indexedelem COMMA indexed
   67        | %empty

   68 indexedelem: LEFT_BRACE expr COLON expr RIGHT_BRACE

   69 block: LEFT_BRACE RIGHT_BRACE
   70      | LEFT_BRACE stmt block RIGHT_BRACE

   71 funcdef: FUNCTION ID LEFT_BRACKETS idlist RIGHT_BRACKETS block
   72        | FUNCTION LEFT_BRACKETS idlist RIGHT_BRACKETS block

   73 const: NUMBER
   74      | STRING
   75      | NIL
   76      | TRUE
   77      | FALSE

   78 idlist: ID
   79       | ID COMMA idlist
   80       | %empty

   81 ifstmt: IF LEFT_BRACKETS expr RIGHT_BRACKETS stmt ELSE stmt
   82       | IF LEFT_BRACKETS expr RIGHT_BRACKETS stmt

   83 whilestmt: WHILE LEFT_BRACKETS expr RIGHT_BRACKETS stmt

   84 forstmt: FOR LEFT_BRACKETS elist SEMICOLON expr SEMICOLON elist RIGHT_BRACKETS stmt

   85 returnstmt: RETURN expr
   86           | RETURN


Terminals, with rules where they appear

$end (0) 0
error (256)
NUMBER (258) 73
REAL (259)
ID (260) 44 45 46 48 50 58 71 78 79
IF (261) 81 82
ELSE (262) 81
WHILE (263) 83
FOR (264) 84
FUNCTION (265) 71 72
RETURN (266) 85 86
BREAK (267) 7
CONTINUE (268) 8
AND (269) 28
NOT (270) 32
OR (271) 29
LOCAl (272) 45
TRUE (273) 76
FALSE (274) 77
NIL (275) 75
STRING (276) 74
EQUALS (277) 26
PLUS (278) 17
ASSIGN (279) 38
MINUS (280) 18 31
ASTERISK (281) 19
DIVISION (282) 20
PERCENT (283) 21
DIFFERENT (284) 27
PLUS_PLUS (285) 33 34
MINUS_MINUS (286) 35 36
GREATER (287) 22
LESS (288) 24
GREATER_EQUALS (289) 23
LESS_EQUALS (290) 25
SEMICOLON (291) 2 7 8 11 84
COMMA (292) 60 66 79
COLON (293) 68
DOUBLE_COLON (294) 46
DOT (295) 48 50
Diaeresis (296) 58
LEFT_BRACE (297) 68 69 70
RIGHT_BRACE (298) 68 69 70
LEFT_SQUARE (299) 49 51 62 63 64
RIGHT_SQUARE (300) 49 51 62 63 64
LEFT_BRACKETS (301) 30 42 52 54 57 58 71 72 81 82 83 84
RIGHT_BRACKETS (302) 30 42 52 54 57 58 71 72 81 82 83 84


Nonterminals, with rules where they appear

$accept (48)
    on left: 0
program (49)
    on left: 1, on right: 0
stmt (50)
    on left: 2 3 4 5 6 7 8 9 10 11, on right: 12 13 70 81 82 83 84
statements (51)
    on left: 12 13, on right: 1 12
expr (52)
    on left: 14 15 16, on right: 2 15 30 31 32 38 49 51 59 60 68 81
    82 83 84 85
op (53)
    on left: 17 18 19 20 21 22 23 24 25 26 27 28 29, on right: 15
term (54)
    on left: 30 31 32 33 34 35 36 37, on right: 16
assignexpr (55)
    on left: 38, on right: 14
primary (56)
    on left: 39 40 41 42 43, on right: 37
lvalue (57)
    on left: 44 45 46 47, on right: 33 34 35 36 38 39 48 49 53
member (58)
    on left: 48 49 50 51, on right: 47
call (59)
    on left: 52 53 54, on right: 40 50 51 52
callsuffix (60)
    on left: 55 56, on right: 53
normcall (61)
    on left: 57, on right: 55
methodcall (62)
    on left: 58, on right: 56
elist (63)
    on left: 59 60 61, on right: 52 54 57 58 60 62 84
objectdef (64)
    on left: 62 63 64, on right: 41
indexed (65)
    on left: 65 66 67, on right: 63 66
indexedelem (66)
    on left: 68, on right: 65 66
block (67)
    on left: 69 70, on right: 9 70 71 72
funcdef (68)
    on left: 71 72, on right: 10 42 54
const (69)
    on left: 73 74 75 76 77, on right: 43
idlist (70)
    on left: 78 79 80, on right: 71 72 79
ifstmt (71)
    on left: 81 82, on right: 3
whilestmt (72)
    on left: 83, on right: 4
forstmt (73)
    on left: 84, on right: 5
returnstmt (74)
    on left: 85 86, on right: 6


State 0

    0 $accept: . program $end

    NUMBER         shift, and go to state 1
    ID             shift, and go to state 2
    IF             shift, and go to state 3
    WHILE          shift, and go to state 4
    FOR            shift, and go to state 5
    FUNCTION       shift, and go to state 6
    RETURN         shift, and go to state 7
    BREAK          shift, and go to state 8
    CONTINUE       shift, and go to state 9
    NOT            shift, and go to state 10
    LOCAl          shift, and go to state 11
    TRUE           shift, and go to state 12
    FALSE          shift, and go to state 13
    NIL            shift, and go to state 14
    STRING         shift, and go to state 15
    MINUS          shift, and go to state 16
    PLUS_PLUS      shift, and go to state 17
    MINUS_MINUS    shift, and go to state 18
    SEMICOLON      shift, and go to state 19
    DOUBLE_COLON   shift, and go to state 20
    LEFT_BRACE     shift, and go to state 21
    LEFT_SQUARE    shift, and go to state 22
    LEFT_BRACKETS  shift, and go to state 23

    program     go to state 24
    stmt        go to state 25
    statements  go to state 26
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    block       go to state 35
    funcdef     go to state 36
    const       go to state 37
    ifstmt      go to state 38
    whilestmt   go to state 39
    forstmt     go to state 40
    returnstmt  go to state 41


State 1

   73 const: NUMBER .

    $default  reduce using rule 73 (const)


State 2

   44 lvalue: ID .

    $default  reduce using rule 44 (lvalue)


State 3

   81 ifstmt: IF . LEFT_BRACKETS expr RIGHT_BRACKETS stmt ELSE stmt
   82       | IF . LEFT_BRACKETS expr RIGHT_BRACKETS stmt

    LEFT_BRACKETS  shift, and go to state 42


State 4

   83 whilestmt: WHILE . LEFT_BRACKETS expr RIGHT_BRACKETS stmt

    LEFT_BRACKETS  shift, and go to state 43


State 5

   84 forstmt: FOR . LEFT_BRACKETS elist SEMICOLON expr SEMICOLON elist RIGHT_BRACKETS stmt

    LEFT_BRACKETS  shift, and go to state 44


State 6

   71 funcdef: FUNCTION . ID LEFT_BRACKETS idlist RIGHT_BRACKETS block
   72        | FUNCTION . LEFT_BRACKETS idlist RIGHT_BRACKETS block

    ID             shift, and go to state 45
    LEFT_BRACKETS  shift, and go to state 46


State 7

   85 returnstmt: RETURN . expr
   86           | RETURN .

    NUMBER         shift, and go to state 1
    ID             shift, and go to state 2
    NOT            shift, and go to state 10
    LOCAl          shift, and go to state 11
    TRUE           shift, and go to state 12
    FALSE          shift, and go to state 13
    NIL            shift, and go to state 14
    STRING         shift, and go to state 15
    MINUS          shift, and go to state 16
    PLUS_PLUS      shift, and go to state 17
    MINUS_MINUS    shift, and go to state 18
    DOUBLE_COLON   shift, and go to state 20
    LEFT_SQUARE    shift, and go to state 22
    LEFT_BRACKETS  shift, and go to state 23

    NUMBER         [reduce using rule 86 (returnstmt)]
    ID             [reduce using rule 86 (returnstmt)]
    NOT            [reduce using rule 86 (returnstmt)]
    LOCAl          [reduce using rule 86 (returnstmt)]
    TRUE           [reduce using rule 86 (returnstmt)]
    FALSE          [reduce using rule 86 (returnstmt)]
    NIL            [reduce using rule 86 (returnstmt)]
    STRING         [reduce using rule 86 (returnstmt)]
    MINUS          [reduce using rule 86 (returnstmt)]
    PLUS_PLUS      [reduce using rule 86 (returnstmt)]
    MINUS_MINUS    [reduce using rule 86 (returnstmt)]
    DOUBLE_COLON   [reduce using rule 86 (returnstmt)]
    LEFT_SQUARE    [reduce using rule 86 (returnstmt)]
    LEFT_BRACKETS  [reduce using rule 86 (returnstmt)]
    $default       reduce using rule 86 (returnstmt)

    expr        go to state 47
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 8

    7 stmt: BREAK . SEMICOLON

    SEMICOLON  shift, and go to state 48


State 9

    8 stmt: CONTINUE . SEMICOLON

    SEMICOLON  shift, and go to state 49


State 10

   32 term: NOT . expr

    NUMBER         shift, and go to state 1
    ID             shift, and go to state 2
    NOT            shift, and go to state 10
    LOCAl          shift, and go to state 11
    TRUE           shift, and go to state 12
    FALSE          shift, and go to state 13
    NIL            shift, and go to state 14
    STRING         shift, and go to state 15
    MINUS          shift, and go to state 16
    PLUS_PLUS      shift, and go to state 17
    MINUS_MINUS    shift, and go to state 18
    DOUBLE_COLON   shift, and go to state 20
    LEFT_SQUARE    shift, and go to state 22
    LEFT_BRACKETS  shift, and go to state 23

    expr        go to state 50
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 11

   45 lvalue: LOCAl . ID

    ID  shift, and go to state 51


State 12

   76 const: TRUE .

    $default  reduce using rule 76 (const)


State 13

   77 const: FALSE .

    $default  reduce using rule 77 (const)


State 14

   75 const: NIL .

    $default  reduce using rule 75 (const)


State 15

   74 const: STRING .

    $default  reduce using rule 74 (const)


State 16

   31 term: MINUS . expr

    NUMBER         shift, and go to state 1
    ID             shift, and go to state 2
    NOT            shift, and go to state 10
    LOCAl          shift, and go to state 11
    TRUE           shift, and go to state 12
    FALSE          shift, and go to state 13
    NIL            shift, and go to state 14
    STRING         shift, and go to state 15
    MINUS          shift, and go to state 16
    PLUS_PLUS      shift, and go to state 17
    MINUS_MINUS    shift, and go to state 18
    DOUBLE_COLON   shift, and go to state 20
    LEFT_SQUARE    shift, and go to state 22
    LEFT_BRACKETS  shift, and go to state 23

    expr        go to state 52
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 17

   33 term: PLUS_PLUS . lvalue

    ID             shift, and go to state 2
    LOCAl          shift, and go to state 11
    DOUBLE_COLON   shift, and go to state 20
    LEFT_BRACKETS  shift, and go to state 53

    lvalue  go to state 54
    member  go to state 32
    call    go to state 55


State 18

   35 term: MINUS_MINUS . lvalue

    ID             shift, and go to state 2
    LOCAl          shift, and go to state 11
    DOUBLE_COLON   shift, and go to state 20
    LEFT_BRACKETS  shift, and go to state 53

    lvalue  go to state 56
    member  go to state 32
    call    go to state 55


State 19

   11 stmt: SEMICOLON .

    $default  reduce using rule 11 (stmt)


State 20

   46 lvalue: DOUBLE_COLON . ID

    ID  shift, and go to state 57


State 21

   69 block: LEFT_BRACE . RIGHT_BRACE
   70      | LEFT_BRACE . stmt block RIGHT_BRACE

    NUMBER         shift, and go to state 1
    ID             shift, and go to state 2
    IF             shift, and go to state 3
    WHILE          shift, and go to state 4
    FOR            shift, and go to state 5
    FUNCTION       shift, and go to state 6
    RETURN         shift, and go to state 7
    BREAK          shift, and go to state 8
    CONTINUE       shift, and go to state 9
    NOT            shift, and go to state 10
    LOCAl          shift, and go to state 11
    TRUE           shift, and go to state 12
    FALSE          shift, and go to state 13
    NIL            shift, and go to state 14
    STRING         shift, and go to state 15
    MINUS          shift, and go to state 16
    PLUS_PLUS      shift, and go to state 17
    MINUS_MINUS    shift, and go to state 18
    SEMICOLON      shift, and go to state 19
    DOUBLE_COLON   shift, and go to state 20
    LEFT_BRACE     shift, and go to state 21
    RIGHT_BRACE    shift, and go to state 58
    LEFT_SQUARE    shift, and go to state 22
    LEFT_BRACKETS  shift, and go to state 23

    stmt        go to state 59
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    block       go to state 35
    funcdef     go to state 36
    const       go to state 37
    ifstmt      go to state 38
    whilestmt   go to state 39
    forstmt     go to state 40
    returnstmt  go to state 41


State 22

   62 objectdef: LEFT_SQUARE . elist RIGHT_SQUARE
   63          | LEFT_SQUARE . indexed RIGHT_SQUARE
   64          | LEFT_SQUARE . RIGHT_SQUARE

    NUMBER         shift, and go to state 1
    ID             shift, and go to state 2
    NOT            shift, and go to state 10
    LOCAl          shift, and go to state 11
    TRUE           shift, and go to state 12
    FALSE          shift, and go to state 13
    NIL            shift, and go to state 14
    STRING         shift, and go to state 15
    MINUS          shift, and go to state 16
    PLUS_PLUS      shift, and go to state 17
    MINUS_MINUS    shift, and go to state 18
    DOUBLE_COLON   shift, and go to state 20
    LEFT_BRACE     shift, and go to state 60
    LEFT_SQUARE    shift, and go to state 22
    RIGHT_SQUARE   shift, and go to state 61
    LEFT_BRACKETS  shift, and go to state 23

    RIGHT_SQUARE  [reduce using rule 61 (elist)]
    RIGHT_SQUARE  [reduce using rule 67 (indexed)]

    expr         go to state 62
    term         go to state 28
    assignexpr   go to state 29
    primary      go to state 30
    lvalue       go to state 31
    member       go to state 32
    call         go to state 33
    elist        go to state 63
    objectdef    go to state 34
    indexed      go to state 64
    indexedelem  go to state 65
    const        go to state 37


State 23

   30 term: LEFT_BRACKETS . expr RIGHT_BRACKETS
   42 primary: LEFT_BRACKETS . funcdef RIGHT_BRACKETS
   54 call: LEFT_BRACKETS . funcdef RIGHT_BRACKETS LEFT_BRACKETS elist RIGHT_BRACKETS

    NUMBER         shift, and go to state 1
    ID             shift, and go to state 2
    FUNCTION       shift, and go to state 6
    NOT            shift, and go to state 10
    LOCAl          shift, and go to state 11
    TRUE           shift, and go to state 12
    FALSE          shift, and go to state 13
    NIL            shift, and go to state 14
    STRING         shift, and go to state 15
    MINUS          shift, and go to state 16
    PLUS_PLUS      shift, and go to state 17
    MINUS_MINUS    shift, and go to state 18
    DOUBLE_COLON   shift, and go to state 20
    LEFT_SQUARE    shift, and go to state 22
    LEFT_BRACKETS  shift, and go to state 23

    expr        go to state 66
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    funcdef     go to state 67
    const       go to state 37


State 24

    0 $accept: program . $end

    $end  shift, and go to state 68


State 25

   13 statements: stmt .

    $default  reduce using rule 13 (statements)


State 26

    1 program: statements .
   12 statements: statements . stmt

    NUMBER         shift, and go to state 1
    ID             shift, and go to state 2
    IF             shift, and go to state 3
    WHILE          shift, and go to state 4
    FOR            shift, and go to state 5
    FUNCTION       shift, and go to state 6
    RETURN         shift, and go to state 7
    BREAK          shift, and go to state 8
    CONTINUE       shift, and go to state 9
    NOT            shift, and go to state 10
    LOCAl          shift, and go to state 11
    TRUE           shift, and go to state 12
    FALSE          shift, and go to state 13
    NIL            shift, and go to state 14
    STRING         shift, and go to state 15
    MINUS          shift, and go to state 16
    PLUS_PLUS      shift, and go to state 17
    MINUS_MINUS    shift, and go to state 18
    SEMICOLON      shift, and go to state 19
    DOUBLE_COLON   shift, and go to state 20
    LEFT_BRACE     shift, and go to state 21
    LEFT_SQUARE    shift, and go to state 22
    LEFT_BRACKETS  shift, and go to state 23

    $default  reduce using rule 1 (program)

    stmt        go to state 69
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    block       go to state 35
    funcdef     go to state 36
    const       go to state 37
    ifstmt      go to state 38
    whilestmt   go to state 39
    forstmt     go to state 40
    returnstmt  go to state 41


State 27

    2 stmt: expr . SEMICOLON
   15 expr: expr . op expr

    AND             shift, and go to state 70
    OR              shift, and go to state 71
    EQUALS          shift, and go to state 72
    PLUS            shift, and go to state 73
    MINUS           shift, and go to state 74
    ASTERISK        shift, and go to state 75
    DIVISION        shift, and go to state 76
    PERCENT         shift, and go to state 77
    DIFFERENT       shift, and go to state 78
    GREATER         shift, and go to state 79
    LESS            shift, and go to state 80
    GREATER_EQUALS  shift, and go to state 81
    LESS_EQUALS     shift, and go to state 82
    SEMICOLON       shift, and go to state 83

    op  go to state 84


State 28

   16 expr: term .

    $default  reduce using rule 16 (expr)


State 29

   14 expr: assignexpr .

    $default  reduce using rule 14 (expr)


State 30

   37 term: primary .

    $default  reduce using rule 37 (term)


State 31

   34 term: lvalue . PLUS_PLUS
   36     | lvalue . MINUS_MINUS
   38 assignexpr: lvalue . ASSIGN expr
   39 primary: lvalue .
   48 member: lvalue . DOT ID
   49       | lvalue . LEFT_SQUARE expr RIGHT_SQUARE
   53 call: lvalue . callsuffix

    ASSIGN         shift, and go to state 85
    PLUS_PLUS      shift, and go to state 86
    MINUS_MINUS    shift, and go to state 87
    DOT            shift, and go to state 88
    Diaeresis      shift, and go to state 89
    LEFT_SQUARE    shift, and go to state 90
    LEFT_BRACKETS  shift, and go to state 91

    PLUS_PLUS      [reduce using rule 39 (primary)]
    MINUS_MINUS    [reduce using rule 39 (primary)]
    LEFT_SQUARE    [reduce using rule 39 (primary)]
    LEFT_BRACKETS  [reduce using rule 39 (primary)]
    $default       reduce using rule 39 (primary)

    callsuffix  go to state 92
    normcall    go to state 93
    methodcall  go to state 94


State 32

   47 lvalue: member .

    $default  reduce using rule 47 (lvalue)


State 33

   40 primary: call .
   50 member: call . DOT ID
   51       | call . LEFT_SQUARE expr RIGHT_SQUARE
   52 call: call . LEFT_BRACKETS elist RIGHT_BRACKETS

    DOT            shift, and go to state 95
    LEFT_SQUARE    shift, and go to state 96
    LEFT_BRACKETS  shift, and go to state 97

    LEFT_SQUARE    [reduce using rule 40 (primary)]
    LEFT_BRACKETS  [reduce using rule 40 (primary)]
    $default       reduce using rule 40 (primary)


State 34

   41 primary: objectdef .

    $default  reduce using rule 41 (primary)


State 35

    9 stmt: block .

    $default  reduce using rule 9 (stmt)


State 36

   10 stmt: funcdef .

    $default  reduce using rule 10 (stmt)


State 37

   43 primary: const .

    $default  reduce using rule 43 (primary)


State 38

    3 stmt: ifstmt .

    $default  reduce using rule 3 (stmt)


State 39

    4 stmt: whilestmt .

    $default  reduce using rule 4 (stmt)


State 40

    5 stmt: forstmt .

    $default  reduce using rule 5 (stmt)


State 41

    6 stmt: returnstmt .

    $default  reduce using rule 6 (stmt)


State 42

   81 ifstmt: IF LEFT_BRACKETS . expr RIGHT_BRACKETS stmt ELSE stmt
   82       | IF LEFT_BRACKETS . expr RIGHT_BRACKETS stmt

    NUMBER         shift, and go to state 1
    ID             shift, and go to state 2
    NOT            shift, and go to state 10
    LOCAl          shift, and go to state 11
    TRUE           shift, and go to state 12
    FALSE          shift, and go to state 13
    NIL            shift, and go to state 14
    STRING         shift, and go to state 15
    MINUS          shift, and go to state 16
    PLUS_PLUS      shift, and go to state 17
    MINUS_MINUS    shift, and go to state 18
    DOUBLE_COLON   shift, and go to state 20
    LEFT_SQUARE    shift, and go to state 22
    LEFT_BRACKETS  shift, and go to state 23

    expr        go to state 98
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 43

   83 whilestmt: WHILE LEFT_BRACKETS . expr RIGHT_BRACKETS stmt

    NUMBER         shift, and go to state 1
    ID             shift, and go to state 2
    NOT            shift, and go to state 10
    LOCAl          shift, and go to state 11
    TRUE           shift, and go to state 12
    FALSE          shift, and go to state 13
    NIL            shift, and go to state 14
    STRING         shift, and go to state 15
    MINUS          shift, and go to state 16
    PLUS_PLUS      shift, and go to state 17
    MINUS_MINUS    shift, and go to state 18
    DOUBLE_COLON   shift, and go to state 20
    LEFT_SQUARE    shift, and go to state 22
    LEFT_BRACKETS  shift, and go to state 23

    expr        go to state 99
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 44

   84 forstmt: FOR LEFT_BRACKETS . elist SEMICOLON expr SEMICOLON elist RIGHT_BRACKETS stmt

    NUMBER         shift, and go to state 1
    ID             shift, and go to state 2
    NOT            shift, and go to state 10
    LOCAl          shift, and go to state 11
    TRUE           shift, and go to state 12
    FALSE          shift, and go to state 13
    NIL            shift, and go to state 14
    STRING         shift, and go to state 15
    MINUS          shift, and go to state 16
    PLUS_PLUS      shift, and go to state 17
    MINUS_MINUS    shift, and go to state 18
    DOUBLE_COLON   shift, and go to state 20
    LEFT_SQUARE    shift, and go to state 22
    LEFT_BRACKETS  shift, and go to state 23

    $default  reduce using rule 61 (elist)

    expr        go to state 62
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    elist       go to state 100
    objectdef   go to state 34
    const       go to state 37


State 45

   71 funcdef: FUNCTION ID . LEFT_BRACKETS idlist RIGHT_BRACKETS block

    LEFT_BRACKETS  shift, and go to state 101


State 46

   72 funcdef: FUNCTION LEFT_BRACKETS . idlist RIGHT_BRACKETS block

    ID  shift, and go to state 102

    $default  reduce using rule 80 (idlist)

    idlist  go to state 103


State 47

   15 expr: expr . op expr
   85 returnstmt: RETURN expr .

    AND             shift, and go to state 70
    OR              shift, and go to state 71
    EQUALS          shift, and go to state 72
    PLUS            shift, and go to state 73
    MINUS           shift, and go to state 74
    ASTERISK        shift, and go to state 75
    DIVISION        shift, and go to state 76
    PERCENT         shift, and go to state 77
    DIFFERENT       shift, and go to state 78
    GREATER         shift, and go to state 79
    LESS            shift, and go to state 80
    GREATER_EQUALS  shift, and go to state 81
    LESS_EQUALS     shift, and go to state 82

    MINUS     [reduce using rule 85 (returnstmt)]
    $default  reduce using rule 85 (returnstmt)

    op  go to state 84


State 48

    7 stmt: BREAK SEMICOLON .

    $default  reduce using rule 7 (stmt)


State 49

    8 stmt: CONTINUE SEMICOLON .

    $default  reduce using rule 8 (stmt)


State 50

   15 expr: expr . op expr
   32 term: NOT expr .

    DIVISION  shift, and go to state 76

    DIVISION  [reduce using rule 32 (term)]
    $default  reduce using rule 32 (term)

    op  go to state 84


State 51

   45 lvalue: LOCAl ID .

    $default  reduce using rule 45 (lvalue)


State 52

   15 expr: expr . op expr
   31 term: MINUS expr .

    ASTERISK  shift, and go to state 75
    DIVISION  shift, and go to state 76
    PERCENT   shift, and go to state 77

    DIVISION  [reduce using rule 31 (term)]
    $default  reduce using rule 31 (term)

    op  go to state 84


State 53

   54 call: LEFT_BRACKETS . funcdef RIGHT_BRACKETS LEFT_BRACKETS elist RIGHT_BRACKETS

    FUNCTION  shift, and go to state 6

    funcdef  go to state 104


State 54

   33 term: PLUS_PLUS lvalue .
   48 member: lvalue . DOT ID
   49       | lvalue . LEFT_SQUARE expr RIGHT_SQUARE
   53 call: lvalue . callsuffix

    DOT            shift, and go to state 88
    Diaeresis      shift, and go to state 89
    LEFT_SQUARE    shift, and go to state 90
    LEFT_BRACKETS  shift, and go to state 91

    $default  reduce using rule 33 (term)

    callsuffix  go to state 92
    normcall    go to state 93
    methodcall  go to state 94


State 55

   50 member: call . DOT ID
   51       | call . LEFT_SQUARE expr RIGHT_SQUARE
   52 call: call . LEFT_BRACKETS elist RIGHT_BRACKETS

    DOT            shift, and go to state 95
    LEFT_SQUARE    shift, and go to state 96
    LEFT_BRACKETS  shift, and go to state 97


State 56

   35 term: MINUS_MINUS lvalue .
   48 member: lvalue . DOT ID
   49       | lvalue . LEFT_SQUARE expr RIGHT_SQUARE
   53 call: lvalue . callsuffix

    DOT            shift, and go to state 88
    Diaeresis      shift, and go to state 89
    LEFT_SQUARE    shift, and go to state 90
    LEFT_BRACKETS  shift, and go to state 91

    $default  reduce using rule 35 (term)

    callsuffix  go to state 92
    normcall    go to state 93
    methodcall  go to state 94


State 57

   46 lvalue: DOUBLE_COLON ID .

    $default  reduce using rule 46 (lvalue)


State 58

   69 block: LEFT_BRACE RIGHT_BRACE .

    $default  reduce using rule 69 (block)


State 59

   70 block: LEFT_BRACE stmt . block RIGHT_BRACE

    LEFT_BRACE  shift, and go to state 21

    block  go to state 105


State 60

   68 indexedelem: LEFT_BRACE . expr COLON expr RIGHT_BRACE

    NUMBER         shift, and go to state 1
    ID             shift, and go to state 2
    NOT            shift, and go to state 10
    LOCAl          shift, and go to state 11
    TRUE           shift, and go to state 12
    FALSE          shift, and go to state 13
    NIL            shift, and go to state 14
    STRING         shift, and go to state 15
    MINUS          shift, and go to state 16
    PLUS_PLUS      shift, and go to state 17
    MINUS_MINUS    shift, and go to state 18
    DOUBLE_COLON   shift, and go to state 20
    LEFT_SQUARE    shift, and go to state 22
    LEFT_BRACKETS  shift, and go to state 23

    expr        go to state 106
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 61

   64 objectdef: LEFT_SQUARE RIGHT_SQUARE .

    $default  reduce using rule 64 (objectdef)


State 62

   15 expr: expr . op expr
   59 elist: expr .
   60      | expr . COMMA elist

    AND             shift, and go to state 70
    OR              shift, and go to state 71
    EQUALS          shift, and go to state 72
    PLUS            shift, and go to state 73
    MINUS           shift, and go to state 74
    ASTERISK        shift, and go to state 75
    DIVISION        shift, and go to state 76
    PERCENT         shift, and go to state 77
    DIFFERENT       shift, and go to state 78
    GREATER         shift, and go to state 79
    LESS            shift, and go to state 80
    GREATER_EQUALS  shift, and go to state 81
    LESS_EQUALS     shift, and go to state 82
    COMMA           shift, and go to state 107

    $default  reduce using rule 59 (elist)

    op  go to state 84


State 63

   62 objectdef: LEFT_SQUARE elist . RIGHT_SQUARE

    RIGHT_SQUARE  shift, and go to state 108


State 64

   63 objectdef: LEFT_SQUARE indexed . RIGHT_SQUARE

    RIGHT_SQUARE  shift, and go to state 109


State 65

   65 indexed: indexedelem .
   66        | indexedelem . COMMA indexed

    COMMA  shift, and go to state 110

    $default  reduce using rule 65 (indexed)


State 66

   15 expr: expr . op expr
   30 term: LEFT_BRACKETS expr . RIGHT_BRACKETS

    AND             shift, and go to state 70
    OR              shift, and go to state 71
    EQUALS          shift, and go to state 72
    PLUS            shift, and go to state 73
    MINUS           shift, and go to state 74
    ASTERISK        shift, and go to state 75
    DIVISION        shift, and go to state 76
    PERCENT         shift, and go to state 77
    DIFFERENT       shift, and go to state 78
    GREATER         shift, and go to state 79
    LESS            shift, and go to state 80
    GREATER_EQUALS  shift, and go to state 81
    LESS_EQUALS     shift, and go to state 82
    RIGHT_BRACKETS  shift, and go to state 111

    op  go to state 84


State 67

   42 primary: LEFT_BRACKETS funcdef . RIGHT_BRACKETS
   54 call: LEFT_BRACKETS funcdef . RIGHT_BRACKETS LEFT_BRACKETS elist RIGHT_BRACKETS

    RIGHT_BRACKETS  shift, and go to state 112


State 68

    0 $accept: program $end .

    $default  accept


State 69

   12 statements: statements stmt .

    $default  reduce using rule 12 (statements)


State 70

   28 op: AND .

    $default  reduce using rule 28 (op)


State 71

   29 op: OR .

    $default  reduce using rule 29 (op)


State 72

   26 op: EQUALS .

    $default  reduce using rule 26 (op)


State 73

   17 op: PLUS .

    $default  reduce using rule 17 (op)


State 74

   18 op: MINUS .

    $default  reduce using rule 18 (op)


State 75

   19 op: ASTERISK .

    $default  reduce using rule 19 (op)


State 76

   20 op: DIVISION .

    $default  reduce using rule 20 (op)


State 77

   21 op: PERCENT .

    $default  reduce using rule 21 (op)


State 78

   27 op: DIFFERENT .

    $default  reduce using rule 27 (op)


State 79

   22 op: GREATER .

    $default  reduce using rule 22 (op)


State 80

   24 op: LESS .

    $default  reduce using rule 24 (op)


State 81

   23 op: GREATER_EQUALS .

    $default  reduce using rule 23 (op)


State 82

   25 op: LESS_EQUALS .

    $default  reduce using rule 25 (op)


State 83

    2 stmt: expr SEMICOLON .

    $default  reduce using rule 2 (stmt)


State 84

   15 expr: expr op . expr

    NUMBER         shift, and go to state 1
    ID             shift, and go to state 2
    NOT            shift, and go to state 10
    LOCAl          shift, and go to state 11
    TRUE           shift, and go to state 12
    FALSE          shift, and go to state 13
    NIL            shift, and go to state 14
    STRING         shift, and go to state 15
    MINUS          shift, and go to state 16
    PLUS_PLUS      shift, and go to state 17
    MINUS_MINUS    shift, and go to state 18
    DOUBLE_COLON   shift, and go to state 20
    LEFT_SQUARE    shift, and go to state 22
    LEFT_BRACKETS  shift, and go to state 23

    expr        go to state 113
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 85

   38 assignexpr: lvalue ASSIGN . expr

    NUMBER         shift, and go to state 1
    ID             shift, and go to state 2
    NOT            shift, and go to state 10
    LOCAl          shift, and go to state 11
    TRUE           shift, and go to state 12
    FALSE          shift, and go to state 13
    NIL            shift, and go to state 14
    STRING         shift, and go to state 15
    MINUS          shift, and go to state 16
    PLUS_PLUS      shift, and go to state 17
    MINUS_MINUS    shift, and go to state 18
    DOUBLE_COLON   shift, and go to state 20
    LEFT_SQUARE    shift, and go to state 22
    LEFT_BRACKETS  shift, and go to state 23

    expr        go to state 114
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 86

   34 term: lvalue PLUS_PLUS .

    $default  reduce using rule 34 (term)


State 87

   36 term: lvalue MINUS_MINUS .

    $default  reduce using rule 36 (term)


State 88

   48 member: lvalue DOT . ID

    ID  shift, and go to state 115


State 89

   58 methodcall: Diaeresis . ID LEFT_BRACKETS elist RIGHT_BRACKETS

    ID  shift, and go to state 116


State 90

   49 member: lvalue LEFT_SQUARE . expr RIGHT_SQUARE

    NUMBER         shift, and go to state 1
    ID             shift, and go to state 2
    NOT            shift, and go to state 10
    LOCAl          shift, and go to state 11
    TRUE           shift, and go to state 12
    FALSE          shift, and go to state 13
    NIL            shift, and go to state 14
    STRING         shift, and go to state 15
    MINUS          shift, and go to state 16
    PLUS_PLUS      shift, and go to state 17
    MINUS_MINUS    shift, and go to state 18
    DOUBLE_COLON   shift, and go to state 20
    LEFT_SQUARE    shift, and go to state 22
    LEFT_BRACKETS  shift, and go to state 23

    expr        go to state 117
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 91

   57 normcall: LEFT_BRACKETS . elist RIGHT_BRACKETS

    NUMBER         shift, and go to state 1
    ID             shift, and go to state 2
    NOT            shift, and go to state 10
    LOCAl          shift, and go to state 11
    TRUE           shift, and go to state 12
    FALSE          shift, and go to state 13
    NIL            shift, and go to state 14
    STRING         shift, and go to state 15
    MINUS          shift, and go to state 16
    PLUS_PLUS      shift, and go to state 17
    MINUS_MINUS    shift, and go to state 18
    DOUBLE_COLON   shift, and go to state 20
    LEFT_SQUARE    shift, and go to state 22
    LEFT_BRACKETS  shift, and go to state 23

    $default  reduce using rule 61 (elist)

    expr        go to state 62
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    elist       go to state 118
    objectdef   go to state 34
    const       go to state 37


State 92

   53 call: lvalue callsuffix .

    $default  reduce using rule 53 (call)


State 93

   55 callsuffix: normcall .

    $default  reduce using rule 55 (callsuffix)


State 94

   56 callsuffix: methodcall .

    $default  reduce using rule 56 (callsuffix)


State 95

   50 member: call DOT . ID

    ID  shift, and go to state 119


State 96

   51 member: call LEFT_SQUARE . expr RIGHT_SQUARE

    NUMBER         shift, and go to state 1
    ID             shift, and go to state 2
    NOT            shift, and go to state 10
    LOCAl          shift, and go to state 11
    TRUE           shift, and go to state 12
    FALSE          shift, and go to state 13
    NIL            shift, and go to state 14
    STRING         shift, and go to state 15
    MINUS          shift, and go to state 16
    PLUS_PLUS      shift, and go to state 17
    MINUS_MINUS    shift, and go to state 18
    DOUBLE_COLON   shift, and go to state 20
    LEFT_SQUARE    shift, and go to state 22
    LEFT_BRACKETS  shift, and go to state 23

    expr        go to state 120
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 97

   52 call: call LEFT_BRACKETS . elist RIGHT_BRACKETS

    NUMBER         shift, and go to state 1
    ID             shift, and go to state 2
    NOT            shift, and go to state 10
    LOCAl          shift, and go to state 11
    TRUE           shift, and go to state 12
    FALSE          shift, and go to state 13
    NIL            shift, and go to state 14
    STRING         shift, and go to state 15
    MINUS          shift, and go to state 16
    PLUS_PLUS      shift, and go to state 17
    MINUS_MINUS    shift, and go to state 18
    DOUBLE_COLON   shift, and go to state 20
    LEFT_SQUARE    shift, and go to state 22
    LEFT_BRACKETS  shift, and go to state 23

    $default  reduce using rule 61 (elist)

    expr        go to state 62
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    elist       go to state 121
    objectdef   go to state 34
    const       go to state 37


State 98

   15 expr: expr . op expr
   81 ifstmt: IF LEFT_BRACKETS expr . RIGHT_BRACKETS stmt ELSE stmt
   82       | IF LEFT_BRACKETS expr . RIGHT_BRACKETS stmt

    AND             shift, and go to state 70
    OR              shift, and go to state 71
    EQUALS          shift, and go to state 72
    PLUS            shift, and go to state 73
    MINUS           shift, and go to state 74
    ASTERISK        shift, and go to state 75
    DIVISION        shift, and go to state 76
    PERCENT         shift, and go to state 77
    DIFFERENT       shift, and go to state 78
    GREATER         shift, and go to state 79
    LESS            shift, and go to state 80
    GREATER_EQUALS  shift, and go to state 81
    LESS_EQUALS     shift, and go to state 82
    RIGHT_BRACKETS  shift, and go to state 122

    op  go to state 84


State 99

   15 expr: expr . op expr
   83 whilestmt: WHILE LEFT_BRACKETS expr . RIGHT_BRACKETS stmt

    AND             shift, and go to state 70
    OR              shift, and go to state 71
    EQUALS          shift, and go to state 72
    PLUS            shift, and go to state 73
    MINUS           shift, and go to state 74
    ASTERISK        shift, and go to state 75
    DIVISION        shift, and go to state 76
    PERCENT         shift, and go to state 77
    DIFFERENT       shift, and go to state 78
    GREATER         shift, and go to state 79
    LESS            shift, and go to state 80
    GREATER_EQUALS  shift, and go to state 81
    LESS_EQUALS     shift, and go to state 82
    RIGHT_BRACKETS  shift, and go to state 123

    op  go to state 84


State 100

   84 forstmt: FOR LEFT_BRACKETS elist . SEMICOLON expr SEMICOLON elist RIGHT_BRACKETS stmt

    SEMICOLON  shift, and go to state 124


State 101

   71 funcdef: FUNCTION ID LEFT_BRACKETS . idlist RIGHT_BRACKETS block

    ID  shift, and go to state 102

    $default  reduce using rule 80 (idlist)

    idlist  go to state 125


State 102

   78 idlist: ID .
   79       | ID . COMMA idlist

    COMMA  shift, and go to state 126

    $default  reduce using rule 78 (idlist)


State 103

   72 funcdef: FUNCTION LEFT_BRACKETS idlist . RIGHT_BRACKETS block

    RIGHT_BRACKETS  shift, and go to state 127


State 104

   54 call: LEFT_BRACKETS funcdef . RIGHT_BRACKETS LEFT_BRACKETS elist RIGHT_BRACKETS

    RIGHT_BRACKETS  shift, and go to state 128


State 105

   70 block: LEFT_BRACE stmt block . RIGHT_BRACE

    RIGHT_BRACE  shift, and go to state 129


State 106

   15 expr: expr . op expr
   68 indexedelem: LEFT_BRACE expr . COLON expr RIGHT_BRACE

    AND             shift, and go to state 70
    OR              shift, and go to state 71
    EQUALS          shift, and go to state 72
    PLUS            shift, and go to state 73
    MINUS           shift, and go to state 74
    ASTERISK        shift, and go to state 75
    DIVISION        shift, and go to state 76
    PERCENT         shift, and go to state 77
    DIFFERENT       shift, and go to state 78
    GREATER         shift, and go to state 79
    LESS            shift, and go to state 80
    GREATER_EQUALS  shift, and go to state 81
    LESS_EQUALS     shift, and go to state 82
    COLON           shift, and go to state 130

    op  go to state 84


State 107

   60 elist: expr COMMA . elist

    NUMBER         shift, and go to state 1
    ID             shift, and go to state 2
    NOT            shift, and go to state 10
    LOCAl          shift, and go to state 11
    TRUE           shift, and go to state 12
    FALSE          shift, and go to state 13
    NIL            shift, and go to state 14
    STRING         shift, and go to state 15
    MINUS          shift, and go to state 16
    PLUS_PLUS      shift, and go to state 17
    MINUS_MINUS    shift, and go to state 18
    DOUBLE_COLON   shift, and go to state 20
    LEFT_SQUARE    shift, and go to state 22
    LEFT_BRACKETS  shift, and go to state 23

    $default  reduce using rule 61 (elist)

    expr        go to state 62
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    elist       go to state 131
    objectdef   go to state 34
    const       go to state 37


State 108

   62 objectdef: LEFT_SQUARE elist RIGHT_SQUARE .

    $default  reduce using rule 62 (objectdef)


State 109

   63 objectdef: LEFT_SQUARE indexed RIGHT_SQUARE .

    $default  reduce using rule 63 (objectdef)


State 110

   66 indexed: indexedelem COMMA . indexed

    LEFT_BRACE  shift, and go to state 60

    $default  reduce using rule 67 (indexed)

    indexed      go to state 132
    indexedelem  go to state 65


State 111

   30 term: LEFT_BRACKETS expr RIGHT_BRACKETS .

    $default  reduce using rule 30 (term)


State 112

   42 primary: LEFT_BRACKETS funcdef RIGHT_BRACKETS .
   54 call: LEFT_BRACKETS funcdef RIGHT_BRACKETS . LEFT_BRACKETS elist RIGHT_BRACKETS

    $default  reduce using rule 42 (primary)


State 113

   15 expr: expr . op expr
   15     | expr op expr .

    AND             shift, and go to state 70
    OR              shift, and go to state 71
    EQUALS          shift, and go to state 72
    PLUS            shift, and go to state 73
    MINUS           shift, and go to state 74
    ASTERISK        shift, and go to state 75
    DIVISION        shift, and go to state 76
    PERCENT         shift, and go to state 77
    DIFFERENT       shift, and go to state 78
    GREATER         shift, and go to state 79
    LESS            shift, and go to state 80
    GREATER_EQUALS  shift, and go to state 81
    LESS_EQUALS     shift, and go to state 82

    AND             [reduce using rule 15 (expr)]
    OR              [reduce using rule 15 (expr)]
    EQUALS          [reduce using rule 15 (expr)]
    PLUS            [reduce using rule 15 (expr)]
    MINUS           [reduce using rule 15 (expr)]
    ASTERISK        [reduce using rule 15 (expr)]
    DIVISION        [reduce using rule 15 (expr)]
    PERCENT         [reduce using rule 15 (expr)]
    DIFFERENT       [reduce using rule 15 (expr)]
    GREATER         [reduce using rule 15 (expr)]
    LESS            [reduce using rule 15 (expr)]
    GREATER_EQUALS  [reduce using rule 15 (expr)]
    LESS_EQUALS     [reduce using rule 15 (expr)]
    $default        reduce using rule 15 (expr)

    op  go to state 84


State 114

   15 expr: expr . op expr
   38 assignexpr: lvalue ASSIGN expr .

    AND             shift, and go to state 70
    OR              shift, and go to state 71
    EQUALS          shift, and go to state 72
    PLUS            shift, and go to state 73
    MINUS           shift, and go to state 74
    ASTERISK        shift, and go to state 75
    DIVISION        shift, and go to state 76
    PERCENT         shift, and go to state 77
    DIFFERENT       shift, and go to state 78
    GREATER         shift, and go to state 79
    LESS            shift, and go to state 80
    GREATER_EQUALS  shift, and go to state 81
    LESS_EQUALS     shift, and go to state 82

    DIVISION  [reduce using rule 38 (assignexpr)]
    $default  reduce using rule 38 (assignexpr)

    op  go to state 84


State 115

   48 member: lvalue DOT ID .

    $default  reduce using rule 48 (member)


State 116

   58 methodcall: Diaeresis ID . LEFT_BRACKETS elist RIGHT_BRACKETS

    LEFT_BRACKETS  shift, and go to state 134


State 117

   15 expr: expr . op expr
   49 member: lvalue LEFT_SQUARE expr . RIGHT_SQUARE

    AND             shift, and go to state 70
    OR              shift, and go to state 71
    EQUALS          shift, and go to state 72
    PLUS            shift, and go to state 73
    MINUS           shift, and go to state 74
    ASTERISK        shift, and go to state 75
    DIVISION        shift, and go to state 76
    PERCENT         shift, and go to state 77
    DIFFERENT       shift, and go to state 78
    GREATER         shift, and go to state 79
    LESS            shift, and go to state 80
    GREATER_EQUALS  shift, and go to state 81
    LESS_EQUALS     shift, and go to state 82
    RIGHT_SQUARE    shift, and go to state 135

    op  go to state 84


State 118

   57 normcall: LEFT_BRACKETS elist . RIGHT_BRACKETS

    RIGHT_BRACKETS  shift, and go to state 136


State 119

   50 member: call DOT ID .

    $default  reduce using rule 50 (member)


State 120

   15 expr: expr . op expr
   51 member: call LEFT_SQUARE expr . RIGHT_SQUARE

    AND             shift, and go to state 70
    OR              shift, and go to state 71
    EQUALS          shift, and go to state 72
    PLUS            shift, and go to state 73
    MINUS           shift, and go to state 74
    ASTERISK        shift, and go to state 75
    DIVISION        shift, and go to state 76
    PERCENT         shift, and go to state 77
    DIFFERENT       shift, and go to state 78
    GREATER         shift, and go to state 79
    LESS            shift, and go to state 80
    GREATER_EQUALS  shift, and go to state 81
    LESS_EQUALS     shift, and go to state 82
    RIGHT_SQUARE    shift, and go to state 137

    op  go to state 84


State 121

   52 call: call LEFT_BRACKETS elist . RIGHT_BRACKETS

    RIGHT_BRACKETS  shift, and go to state 138


State 122

   81 ifstmt: IF LEFT_BRACKETS expr RIGHT_BRACKETS . stmt ELSE stmt
   82       | IF LEFT_BRACKETS expr RIGHT_BRACKETS . stmt

    NUMBER         shift, and go to state 1
    ID             shift, and go to state 2
    IF             shift, and go to state 3
    WHILE          shift, and go to state 4
    FOR            shift, and go to state 5
    FUNCTION       shift, and go to state 6
    RETURN         shift, and go to state 7
    BREAK          shift, and go to state 8
    CONTINUE       shift, and go to state 9
    NOT            shift, and go to state 10
    LOCAl          shift, and go to state 11
    TRUE           shift, and go to state 12
    FALSE          shift, and go to state 13
    NIL            shift, and go to state 14
    STRING         shift, and go to state 15
    MINUS          shift, and go to state 16
    PLUS_PLUS      shift, and go to state 17
    MINUS_MINUS    shift, and go to state 18
    SEMICOLON      shift, and go to state 19
    DOUBLE_COLON   shift, and go to state 20
    LEFT_BRACE     shift, and go to state 21
    LEFT_SQUARE    shift, and go to state 22
    LEFT_BRACKETS  shift, and go to state 23

    stmt        go to state 139
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    block       go to state 35
    funcdef     go to state 36
    const       go to state 37
    ifstmt      go to state 38
    whilestmt   go to state 39
    forstmt     go to state 40
    returnstmt  go to state 41


State 123

   83 whilestmt: WHILE LEFT_BRACKETS expr RIGHT_BRACKETS . stmt

    NUMBER         shift, and go to state 1
    ID             shift, and go to state 2
    IF             shift, and go to state 3
    WHILE          shift, and go to state 4
    FOR            shift, and go to state 5
    FUNCTION       shift, and go to state 6
    RETURN         shift, and go to state 7
    BREAK          shift, and go to state 8
    CONTINUE       shift, and go to state 9
    NOT            shift, and go to state 10
    LOCAl          shift, and go to state 11
    TRUE           shift, and go to state 12
    FALSE          shift, and go to state 13
    NIL            shift, and go to state 14
    STRING         shift, and go to state 15
    MINUS          shift, and go to state 16
    PLUS_PLUS      shift, and go to state 17
    MINUS_MINUS    shift, and go to state 18
    SEMICOLON      shift, and go to state 19
    DOUBLE_COLON   shift, and go to state 20
    LEFT_BRACE     shift, and go to state 21
    LEFT_SQUARE    shift, and go to state 22
    LEFT_BRACKETS  shift, and go to state 23

    stmt        go to state 140
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    block       go to state 35
    funcdef     go to state 36
    const       go to state 37
    ifstmt      go to state 38
    whilestmt   go to state 39
    forstmt     go to state 40
    returnstmt  go to state 41


State 124

   84 forstmt: FOR LEFT_BRACKETS elist SEMICOLON . expr SEMICOLON elist RIGHT_BRACKETS stmt

    NUMBER         shift, and go to state 1
    ID             shift, and go to state 2
    NOT            shift, and go to state 10
    LOCAl          shift, and go to state 11
    TRUE           shift, and go to state 12
    FALSE          shift, and go to state 13
    NIL            shift, and go to state 14
    STRING         shift, and go to state 15
    MINUS          shift, and go to state 16
    PLUS_PLUS      shift, and go to state 17
    MINUS_MINUS    shift, and go to state 18
    DOUBLE_COLON   shift, and go to state 20
    LEFT_SQUARE    shift, and go to state 22
    LEFT_BRACKETS  shift, and go to state 23

    expr        go to state 141
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 125

   71 funcdef: FUNCTION ID LEFT_BRACKETS idlist . RIGHT_BRACKETS block

    RIGHT_BRACKETS  shift, and go to state 142


State 126

   79 idlist: ID COMMA . idlist

    ID  shift, and go to state 102

    $default  reduce using rule 80 (idlist)

    idlist  go to state 143


State 127

   72 funcdef: FUNCTION LEFT_BRACKETS idlist RIGHT_BRACKETS . block

    LEFT_BRACE  shift, and go to state 21

    block  go to state 144


State 128

   54 call: LEFT_BRACKETS funcdef RIGHT_BRACKETS . LEFT_BRACKETS elist RIGHT_BRACKETS

    LEFT_BRACKETS  shift, and go to state 133


State 129

   70 block: LEFT_BRACE stmt block RIGHT_BRACE .

    $default  reduce using rule 70 (block)


State 130

   68 indexedelem: LEFT_BRACE expr COLON . expr RIGHT_BRACE

    NUMBER         shift, and go to state 1
    ID             shift, and go to state 2
    NOT            shift, and go to state 10
    LOCAl          shift, and go to state 11
    TRUE           shift, and go to state 12
    FALSE          shift, and go to state 13
    NIL            shift, and go to state 14
    STRING         shift, and go to state 15
    MINUS          shift, and go to state 16
    PLUS_PLUS      shift, and go to state 17
    MINUS_MINUS    shift, and go to state 18
    DOUBLE_COLON   shift, and go to state 20
    LEFT_SQUARE    shift, and go to state 22
    LEFT_BRACKETS  shift, and go to state 23

    expr        go to state 145
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 131

   60 elist: expr COMMA elist .

    $default  reduce using rule 60 (elist)


State 132

   66 indexed: indexedelem COMMA indexed .

    $default  reduce using rule 66 (indexed)


State 133

   54 call: LEFT_BRACKETS funcdef RIGHT_BRACKETS LEFT_BRACKETS . elist RIGHT_BRACKETS

    NUMBER         shift, and go to state 1
    ID             shift, and go to state 2
    NOT            shift, and go to state 10
    LOCAl          shift, and go to state 11
    TRUE           shift, and go to state 12
    FALSE          shift, and go to state 13
    NIL            shift, and go to state 14
    STRING         shift, and go to state 15
    MINUS          shift, and go to state 16
    PLUS_PLUS      shift, and go to state 17
    MINUS_MINUS    shift, and go to state 18
    DOUBLE_COLON   shift, and go to state 20
    LEFT_SQUARE    shift, and go to state 22
    LEFT_BRACKETS  shift, and go to state 23

    $default  reduce using rule 61 (elist)

    expr        go to state 62
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    elist       go to state 146
    objectdef   go to state 34
    const       go to state 37


State 134

   58 methodcall: Diaeresis ID LEFT_BRACKETS . elist RIGHT_BRACKETS

    NUMBER         shift, and go to state 1
    ID             shift, and go to state 2
    NOT            shift, and go to state 10
    LOCAl          shift, and go to state 11
    TRUE           shift, and go to state 12
    FALSE          shift, and go to state 13
    NIL            shift, and go to state 14
    STRING         shift, and go to state 15
    MINUS          shift, and go to state 16
    PLUS_PLUS      shift, and go to state 17
    MINUS_MINUS    shift, and go to state 18
    DOUBLE_COLON   shift, and go to state 20
    LEFT_SQUARE    shift, and go to state 22
    LEFT_BRACKETS  shift, and go to state 23

    $default  reduce using rule 61 (elist)

    expr        go to state 62
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    elist       go to state 147
    objectdef   go to state 34
    const       go to state 37


State 135

   49 member: lvalue LEFT_SQUARE expr RIGHT_SQUARE .

    $default  reduce using rule 49 (member)


State 136

   57 normcall: LEFT_BRACKETS elist RIGHT_BRACKETS .

    $default  reduce using rule 57 (normcall)


State 137

   51 member: call LEFT_SQUARE expr RIGHT_SQUARE .

    $default  reduce using rule 51 (member)


State 138

   52 call: call LEFT_BRACKETS elist RIGHT_BRACKETS .

    $default  reduce using rule 52 (call)


State 139

   81 ifstmt: IF LEFT_BRACKETS expr RIGHT_BRACKETS stmt . ELSE stmt
   82       | IF LEFT_BRACKETS expr RIGHT_BRACKETS stmt .

    ELSE  shift, and go to state 148

    ELSE      [reduce using rule 82 (ifstmt)]
    $default  reduce using rule 82 (ifstmt)


State 140

   83 whilestmt: WHILE LEFT_BRACKETS expr RIGHT_BRACKETS stmt .

    $default  reduce using rule 83 (whilestmt)


State 141

   15 expr: expr . op expr
   84 forstmt: FOR LEFT_BRACKETS elist SEMICOLON expr . SEMICOLON elist RIGHT_BRACKETS stmt

    AND             shift, and go to state 70
    OR              shift, and go to state 71
    EQUALS          shift, and go to state 72
    PLUS            shift, and go to state 73
    MINUS           shift, and go to state 74
    ASTERISK        shift, and go to state 75
    DIVISION        shift, and go to state 76
    PERCENT         shift, and go to state 77
    DIFFERENT       shift, and go to state 78
    GREATER         shift, and go to state 79
    LESS            shift, and go to state 80
    GREATER_EQUALS  shift, and go to state 81
    LESS_EQUALS     shift, and go to state 82
    SEMICOLON       shift, and go to state 149

    op  go to state 84


State 142

   71 funcdef: FUNCTION ID LEFT_BRACKETS idlist RIGHT_BRACKETS . block

    LEFT_BRACE  shift, and go to state 21

    block  go to state 150


State 143

   79 idlist: ID COMMA idlist .

    $default  reduce using rule 79 (idlist)


State 144

   72 funcdef: FUNCTION LEFT_BRACKETS idlist RIGHT_BRACKETS block .

    $default  reduce using rule 72 (funcdef)


State 145

   15 expr: expr . op expr
   68 indexedelem: LEFT_BRACE expr COLON expr . RIGHT_BRACE

    AND             shift, and go to state 70
    OR              shift, and go to state 71
    EQUALS          shift, and go to state 72
    PLUS            shift, and go to state 73
    MINUS           shift, and go to state 74
    ASTERISK        shift, and go to state 75
    DIVISION        shift, and go to state 76
    PERCENT         shift, and go to state 77
    DIFFERENT       shift, and go to state 78
    GREATER         shift, and go to state 79
    LESS            shift, and go to state 80
    GREATER_EQUALS  shift, and go to state 81
    LESS_EQUALS     shift, and go to state 82
    RIGHT_BRACE     shift, and go to state 151

    op  go to state 84


State 146

   54 call: LEFT_BRACKETS funcdef RIGHT_BRACKETS LEFT_BRACKETS elist . RIGHT_BRACKETS

    RIGHT_BRACKETS  shift, and go to state 152


State 147

   58 methodcall: Diaeresis ID LEFT_BRACKETS elist . RIGHT_BRACKETS

    RIGHT_BRACKETS  shift, and go to state 153


State 148

   81 ifstmt: IF LEFT_BRACKETS expr RIGHT_BRACKETS stmt ELSE . stmt

    NUMBER         shift, and go to state 1
    ID             shift, and go to state 2
    IF             shift, and go to state 3
    WHILE          shift, and go to state 4
    FOR            shift, and go to state 5
    FUNCTION       shift, and go to state 6
    RETURN         shift, and go to state 7
    BREAK          shift, and go to state 8
    CONTINUE       shift, and go to state 9
    NOT            shift, and go to state 10
    LOCAl          shift, and go to state 11
    TRUE           shift, and go to state 12
    FALSE          shift, and go to state 13
    NIL            shift, and go to state 14
    STRING         shift, and go to state 15
    MINUS          shift, and go to state 16
    PLUS_PLUS      shift, and go to state 17
    MINUS_MINUS    shift, and go to state 18
    SEMICOLON      shift, and go to state 19
    DOUBLE_COLON   shift, and go to state 20
    LEFT_BRACE     shift, and go to state 21
    LEFT_SQUARE    shift, and go to state 22
    LEFT_BRACKETS  shift, and go to state 23

    stmt        go to state 154
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    block       go to state 35
    funcdef     go to state 36
    const       go to state 37
    ifstmt      go to state 38
    whilestmt   go to state 39
    forstmt     go to state 40
    returnstmt  go to state 41


State 149

   84 forstmt: FOR LEFT_BRACKETS elist SEMICOLON expr SEMICOLON . elist RIGHT_BRACKETS stmt

    NUMBER         shift, and go to state 1
    ID             shift, and go to state 2
    NOT            shift, and go to state 10
    LOCAl          shift, and go to state 11
    TRUE           shift, and go to state 12
    FALSE          shift, and go to state 13
    NIL            shift, and go to state 14
    STRING         shift, and go to state 15
    MINUS          shift, and go to state 16
    PLUS_PLUS      shift, and go to state 17
    MINUS_MINUS    shift, and go to state 18
    DOUBLE_COLON   shift, and go to state 20
    LEFT_SQUARE    shift, and go to state 22
    LEFT_BRACKETS  shift, and go to state 23

    $default  reduce using rule 61 (elist)

    expr        go to state 62
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    elist       go to state 155
    objectdef   go to state 34
    const       go to state 37


State 150

   71 funcdef: FUNCTION ID LEFT_BRACKETS idlist RIGHT_BRACKETS block .

    $default  reduce using rule 71 (funcdef)


State 151

   68 indexedelem: LEFT_BRACE expr COLON expr RIGHT_BRACE .

    $default  reduce using rule 68 (indexedelem)


State 152

   54 call: LEFT_BRACKETS funcdef RIGHT_BRACKETS LEFT_BRACKETS elist RIGHT_BRACKETS .

    $default  reduce using rule 54 (call)


State 153

   58 methodcall: Diaeresis ID LEFT_BRACKETS elist RIGHT_BRACKETS .

    $default  reduce using rule 58 (methodcall)


State 154

   81 ifstmt: IF LEFT_BRACKETS expr RIGHT_BRACKETS stmt ELSE stmt .

    $default  reduce using rule 81 (ifstmt)


State 155

   84 forstmt: FOR LEFT_BRACKETS elist SEMICOLON expr SEMICOLON elist . RIGHT_BRACKETS stmt

    RIGHT_BRACKETS  shift, and go to state 156


State 156

   84 forstmt: FOR LEFT_BRACKETS elist SEMICOLON expr SEMICOLON elist RIGHT_BRACKETS . stmt

    NUMBER         shift, and go to state 1
    ID             shift, and go to state 2
    IF             shift, and go to state 3
    WHILE          shift, and go to state 4
    FOR            shift, and go to state 5
    FUNCTION       shift, and go to state 6
    RETURN         shift, and go to state 7
    BREAK          shift, and go to state 8
    CONTINUE       shift, and go to state 9
    NOT            shift, and go to state 10
    LOCAl          shift, and go to state 11
    TRUE           shift, and go to state 12
    FALSE          shift, and go to state 13
    NIL            shift, and go to state 14
    STRING         shift, and go to state 15
    MINUS          shift, and go to state 16
    PLUS_PLUS      shift, and go to state 17
    MINUS_MINUS    shift, and go to state 18
    SEMICOLON      shift, and go to state 19
    DOUBLE_COLON   shift, and go to state 20
    LEFT_BRACE     shift, and go to state 21
    LEFT_SQUARE    shift, and go to state 22
    LEFT_BRACKETS  shift, and go to state 23

    stmt        go to state 157
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    block       go to state 35
    funcdef     go to state 36
    const       go to state 37
    ifstmt      go to state 38
    whilestmt   go to state 39
    forstmt     go to state 40
    returnstmt  go to state 41


State 157

   84 forstmt: FOR LEFT_BRACKETS elist SEMICOLON expr SEMICOLON elist RIGHT_BRACKETS stmt .

    $default  reduce using rule 84 (forstmt)
